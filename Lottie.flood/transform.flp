func transform(layer, timeline, type)
    return [
        "o": opacityComponent(layer: layer, timeline: timeline, type: type),
        "r": rotationComponent(layer: layer, timeline: timeline, type: type),
        "p": positionComponent(layer: layer, timeline: timeline, type: type),
        "a": anchorPointComponent(layer: layer, timeline: timeline, type: type),
        "s": scaleComponent(layer: layer, timeline: timeline, type: type)
    ]
end

func opacityComponent(layer, timeline, type)
    if type == "composition"
        return opacityAnimation(layer: layer, timeline: timeline)
    else if type == "content" && layer.type.name == "text"
        return animation(layer: layer, propertyID: "foregroundColor.opacity", timeline: timeline)
    else
        return ["a": 0,"k": 100,"ix": 7]
    end
end

func rotationComponent(layer, timeline, type)
    switch type
    case "null":
        return  rotationAnimation(layer: layer, timeline: timeline)
    default:
        return  ["a": 0,"k": 0,"ix": 2]
    end
end

func scaleComponent(layer, timeline, type)
    if type == "content" && layer.type.name == "image"
        return [
                    "a": 0,
                    "k": [
                        xImageScale(contentMode: layer.contentMode, layerSize: layer.bounds.size, imageSize: layer.image.size),
                        yImageScale(contentMode: layer.contentMode, layerSize: layer.bounds.size, imageSize: layer.image.size)
                    ],
                    "ix": 2
                ]
    end

    return ["a": 0,"k": [100,100],"ix": 6]
end

func anchorPointComponent(layer, timeline, type)
    switch type
    case "null":
        return anchorPointAnimation(layer: layer, timeline: timeline)
    default:
        return ["a": 0,"k": [0,0],"ix": 1]
    end
end

func positionComponent(layer, timeline, type)
    if type == "null"
        return positionAnimation(layer: layer, timeline: timeline)
    end

    if type == "content" 
        switch layer.type.name
        case "text":
            return [
                    "a": 0,
                    "k": [
                        xTextPosition(layer: layer),
                        yTextPosition(layer: layer)
                    ],
                    "ix": 2
                ]
        case "image":
            return imagePositionAnimation(layer: layer, timeline: timeline)
        end
    end

    return ["a": 0,"k": [0,0],"ix": 2]
end

func xTextPosition(layer)
    switch layer.alignment.name
    case "right":
        return 0
    case "left":
        return 0
    case "center":
        return 0
    case "justified":
        return 0
    end
end

func yTextPosition(layer)
    return layer.fontSize
end

func positionAnimation(layer, timeline)
    return [
        "s": true, // seperate position dimensions into x and y components in order to animate them independently
        "x": xPositionAnimation(layer: layer, timeline: timeline),
        "y": yPositionAnimation(layer: layer, timeline: timeline)
    ]
end

func min(_ lhs, _ rhs)
    if lhs < rhs
        return lhs
    else
        return rhs
    end
end

func max(_ lhs, _ rhs)
    if lhs > rhs
        return lhs
    else
        return rhs
    end
end