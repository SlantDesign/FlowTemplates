func propertyValue(layer, propertyID)
    switch propertyID
    case opacityProperty:
        return lottieValue(from: layer.opacity, propertyID: propertyID)
    case borderSizeProperty:
        var width = layer.bounds.size.width - layer.borderWidth
        var height = layer.bounds.size.height - layer.borderWidth
        var borderSize = [width, height]
    	return lottieValue(from: borderSize, propertyID: propertyID)
    case sizeProperty:
    	return lottieValue(from: layer.bounds.size, propertyID: propertyID)
    case transformScaleXProperty:
        return lottieValue(from: layer.flippedHorizontal, propertyID: propertyID)
    case transformScaleYProperty:
        return lottieValue(from: layer.flippedVertical, propertyID: propertyID)
    case anchorPointProperty:
        return lottieValue(from: [layer.anchorPoint.x, layer.anchorPoint.y, layer.bounds.size], propertyID: propertyID)
    case transformRotationZProperty:
        var scaleX = layer.flippedHorizontal
        var scaleY = layer.flippedVertical
        var rotationDirection = scaleX * scaleY
        var rotation = rotationDirection * rotationValue(from: layer.rotation)
        return lottieValue(from: rotation, propertyID: propertyID)
    case positionXProperty:
        return lottieValue(from: layer.position.x, propertyID: propertyID)
    case positionYProperty:
        return lottieValue(from: layer.position.y, propertyID: propertyID)
    case centerProperty:
        return lottieValue(from: layer.bounds.size, propertyID: propertyID)
    case combinedPathProperty:
        // handled in pathAnimation.flp
        return nil
    case strokeColorProperty:
    	return lottieValue(from: layer.strokeColor, propertyID: propertyID)
    case lineWidthProperty:
    	return lottieValue(from: layer.strokeWidth, propertyID: propertyID)
    case strokeOpacityProperty:
    	return lottieValue(from: layer.strokeColor.alpha, propertyID: propertyID)
    case fillColorProperty:
    	return lottieValue(from: layer.fillColor, propertyID: propertyID)
    case fillColorOpacityProperty:
    	return lottieValue(from: layer.fillColor.alpha, propertyID: propertyID)
    case backgroundColorProperty:
    	return lottieValue(from: layer.backgroundColor, propertyID: propertyID)
    case backgroundColorOpacityProperty:
    	return lottieValue(from: layer.backgroundColor.alpha, propertyID: propertyID)
    case strokeStartProperty:
        return lottieValue(from: layer.strokeStart, propertyID: propertyID)
    case strokeEndProperty:
        return lottieValue(from: layer.strokeEnd, propertyID: propertyID)
    case lineDashPhaseProperty:
        return lottieValue(from: layer.dashPatternOffset, propertyID: propertyID)
    case lineDashPatternProperty:
        return lottieValue(from: layer.dashPattern, propertyID: propertyID)
    case shadowColorProperty:
        return lottieValue(from: layer.shadowColor, propertyID: propertyID)
    case shadowColorOpacityProperty:
        return lottieValue(from: layer.shadowColor.alpha, propertyID: propertyID)
    case shadowRadiusProperty:
        return lottieValue(from: layer.shadowRadius, propertyID: propertyID)
    case cornerRadiusProperty:
        return lottieValue(from: layer.cornerRadius, propertyID: propertyID)
    case borderColorProperty:
        return lottieValue(from: layer.borderColor, propertyID: propertyID)
    case borderColorOpacityProperty:
        return lottieValue(from: layer.borderColor.alpha, propertyID: propertyID)
    case borderWidthProperty:
        return lottieValue(from: layer.borderWidth, propertyID: propertyID)
    case shadowDistanceProperty:
        return lottieValue(from: [layer.shadowOffset.width, layer.shadowOffset.height], propertyID: propertyID)
    case shadowDirectionProperty:
        return lottieValue(from: [layer.shadowOffset.width, layer.shadowOffset.height], propertyID: propertyID)
    case foregroundColorProperty:
        return lottieValue(from: layer.foregroundColor, propertyID: propertyID)
    case foregroundColorOpacityProperty:
        return lottieValue(from: layer.foregroundColor.alpha, propertyID: propertyID)
    case imagePositionXProperty:
        var xPos = xImagePosition(contentMode: layer.contentMode, layerSize: layer.bounds.size, imageSize: layer.image.size)
        return lottieValue(from: xPos, propertyID: propertyID)
    case imagePositionYProperty:
        var yPos = yImagePosition(contentMode: layer.contentMode, layerSize: layer.bounds.size, imageSize: layer.image.size)
        return lottieValue(from: yPos, propertyID: propertyID)
    case imageScaleProperty:
        var scale = imageScale(contentMode: layer.contentMode, layerSize: layer.bounds.size, imageSize: layer.image.size)
        return lottieValue(from: scale, propertyID: propertyID)
    default:
        return nil
    end
end

func lottieValue(from value, propertyID)
    switch propertyID
    case opacityProperty:
        return opacityValue(from: value)
    case borderSizeProperty:
        return [value[0], value[1]]
    case sizeProperty:
        return sizeValue(from: value)
    case transformScaleXProperty:
        return scaleValue(scale: value)
    case transformScaleYProperty:
        return scaleValue(scale: value)
    case anchorPointProperty:
        return anchorPointValue(anchorPointX: value[0], anchorPointY: value[1], size: value[2])
    case transformRotationZProperty:
        return value
    case positionXProperty:
        return value
    case positionYProperty:
        return value
    case centerProperty:
        return centerValue(from: value)
    case combinedPathProperty:
        // Handled in pathAnimation.flp
        return nil
    case strokeColorProperty:
        return colorValue(from: value)
    case lineWidthProperty:
        return value
    case strokeOpacityProperty:
        return opacityValue(from: value)
    case fillColorProperty:
        return colorValue(from: value)
    case fillColorOpacityProperty:
        return opacityValue(from: value)
    case backgroundColorProperty:
        return colorValue(from: value)
    case backgroundColorOpacityProperty:
        return opacityValue(from: value)
    case strokeStartProperty:
        return strokeTrimValue(from: value)
    case strokeEndProperty:
        return strokeTrimValue(from: value)
    case lineDashPhaseProperty:
        return value
    case lineDashPatternProperty:
        return value
    case shadowColorProperty:
        return colorValue(from: value)
    case shadowColorOpacityProperty:
        return shadowOpacityValue(from: value)
    case shadowRadiusProperty:
        return shadowRadius(from: value)
    case cornerRadiusProperty:
        return value
    case borderColorProperty:
        return colorValue(from: value)
    case borderColorOpacityProperty:
        return opacityValue(from: value)
    case borderWidthProperty:
        return value
    case shadowDistanceProperty:
        return shadowDistance(width: value[0], height: value[1])
    case shadowDirectionProperty:
        return shadowDirection(width: value[0], height: value[1])
    case foregroundColorProperty:
        return colorValue(from: value)
    case foregroundColorOpacityProperty:
        return opacityValue(from: value)
    case imagePositionXProperty:
        return value
    case imagePositionYProperty:
        return value
    case imageScaleProperty:
        return value
    default:
        return nil
    end
end

func strokeTrimValue(from strokeTrim)
    return strokeTrim * 100
end

func colorValue(from color)
	return [
		color.red,
		color.green,
		color.blue
    ]
end

func shadowDirection(width, height)
    return 90 - atan2(-height, width) * 180 / Math.pi
end

func shadowDistance(width, height)
    return sqrt((width * width) + (height * height))
end

func shadowRadius(from radius)
	return radius * 4 
end

func opacityValue(from opacity)
	return opacity * 100
end

func shadowOpacityValue(from opacity)
    return opacity * 255
end

func scaleValue(scale)
	return scale * 100
end

func anchorPointValue(anchorPointX, anchorPointY, size)
	return [anchorPointX * size.width, anchorPointY * size.height, 0]
end

func rotationValue(from angle)
	return angle.degrees
end

func centerValue(from size)
	return [size.width / 2, size.height / 2]
end

func sizeValue(from size)
    return [size.width, size.height]
end

func textAlignmentValue(from alignment)
    switch alignment.name
    case "natural":
        return 0
    case "left":
        return 0
    case "right":
        return 1
    case "center":
        return 2
    case "justified":
        return 3
    end
end
