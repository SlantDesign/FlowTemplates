func effectsArray(layer, timeline, type)
    switch type
    case "null":
        return [ 
            effect(layer: layer, propertyID: transformScaleXProperty, timeline: timeline),
            effect(layer: layer, propertyID: transformScaleYProperty, timeline: timeline)
        ]
    case "composition":
        // only apply shadows and scaling to composition layers
        return [
            effect(layer: layer, propertyID: "shadow", timeline: timeline)
        ]
    default:
        return []
    end
end

func effect(layer, propertyID, timeline)
    return [
        "ty": effectType(propertyID: propertyID), // effect Type
        "nm": propertyID, // effect name
        "np": 3,
        "mn": "ADBE Slider Control",
        "ix": 1,
        "en": 1,
        "ef": effectValuesArray(layer: layer, propertyID: propertyID, timeline: timeline)
    ]
end

func effectValuesArray(layer, propertyID, timeline)
    switch propertyID
    case transformScaleXProperty:
        return [ effectValue(layer: layer, propertyID: propertyID, timeline: timeline, index: 1) ]
    case transformScaleYProperty:
        return [ effectValue(layer: layer, propertyID: propertyID, timeline: timeline, index: 1) ]
    case "shadow":
        return [ 
            effectValue(layer: layer, propertyID: shadowColorProperty, timeline: timeline, index: 1),
            effectValue(layer: layer, propertyID: shadowColorOpacityProperty, timeline: timeline, index: 2),
            effectValue(layer: layer, propertyID: shadowDirectionProperty, timeline: timeline, index: 3),
            effectValue(layer: layer, propertyID: shadowDistanceProperty, timeline: timeline, index: 4),
            effectValue(layer: layer, propertyID: shadowRadiusProperty, timeline: timeline, index: 5)
        ] 
    end
end

func effectValue(layer, propertyID, timeline, index)
    return [
        "ty": effectValueType(propertyID: propertyID), // effect value type
        "nm": effectValueName(propertyID: propertyID),
        "mn": "ADBE Slider Control-0001",
        "ix": index,
        "v": animation(layer: layer, propertyID: propertyID, timeline: timeline)
    ]               
end

func effectType(propertyID)
    switch propertyID
    case transformScaleXProperty:
        return 5
    case transformScaleYProperty:
        return 5
    case "shadow":
        return 25
    end
end

func effectValueName(propertyID)
    switch propertyID
    case transformScaleXProperty:
        return "Slider"
    case transformScaleYProperty:
        return "Slider"
    default:
        return propertyID
    end
end

func effectValueType(propertyID)
    switch propertyID
    case transformScaleXProperty:
        return 0
    case transformScaleYProperty:
        return 0
    case shadowColorProperty:
        return 2
    case shadowColorOpacityProperty:
        return 0
    case shadowRadiusProperty:
        return 0
    case shadowDistanceProperty:
         return 0
    case shadowDirectionProperty:
         return 0
    end 
end


