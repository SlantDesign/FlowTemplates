func imagePositionAnimation(layer, timeline)
    return [
        "s": true, // seperate position dimensions into x and y components in order to animate them independently
        "x": xImagePositionAnimation(layer: layer, timeline: timeline),
        "y": yImagePositionAnimation(layer: layer, timeline: timeline)
    ]
end

func xImagePositionAnimation(layer, timeline)
    return animation(layer: layer, propertyID: "image.position.x", timeline: timeline)
end

func yImagePositionAnimation(layer, timeline)
    return animation(layer: layer, propertyID: "image.position.y", timeline: timeline)
end

func xImagePosition(contentMode, layerSize, imageSize)
    var imageWidth = imageSize.width
    var layerWidth = layerSize.width
    switch contentMode.name
    case "center":
        return (layerWidth / 2) - (imageWidth / 2)
    case "top":
        return (layerWidth / 2) - (imageWidth / 2)
    case "bottom":
        return (layerWidth / 2) - (imageWidth / 2)
    case "topLeft":
        return 0
    case "left":
        return 0
    case "bottomLeft":
        return 0
    case "right":
        return layerWidth - imageWidth
    case "topRight":
        return layerWidth - imageWidth
    case "bottomRight":
        return layerWidth - imageWidth
    case "resize":
        return 0
    case "resizeAspect":
        var xScale = xImageScale(contentMode: contentMode, layerSize: layerSize, imageSize: imageSize)
        var newImageWidth = imageWidth * xScale / 100
        return (layerWidth / 2) - (newImageWidth / 2)
    case "resizeAspectFill":
        var xScale = xImageScale(contentMode: contentMode, layerSize: layerSize, imageSize: imageSize)
        var newImageWidth = imageWidth * xScale / 100
        return (layerWidth / 2) - (newImageWidth / 2)
    end
end

func yImagePosition(contentMode, layerSize, imageSize)
    var imageHeight = imageSize.height
    var layerHeight = layerSize.height
    switch contentMode.name
    case "top":
        return 0
    case "topLeft":
        return 0
    case "topRight":
        return 0
    case "left":
        return (layerHeight / 2) - (imageHeight / 2)
    case "center":
        return (layerHeight / 2) - (imageHeight / 2)
    case "right":
        return (layerHeight / 2) - (imageHeight / 2)
    case "bottom":
        return layerHeight - imageHeight
    case "bottomLeft":
        return layerHeight - imageHeight
    case "bottomRight":
        return layerHeight - imageHeight
    case "resize":
        return 0
    case "resizeAspect":
        var yScale = yImageScale(contentMode: contentMode, layerSize: layerSize, imageSize: imageSize)
        var newImageHeight = imageHeight * yScale / 100
        return (layerHeight / 2) - (newImageHeight / 2)
    case "resizeAspectFill":
        var yScale = yImageScale(contentMode: contentMode, layerSize: layerSize, imageSize: imageSize)
        var newImageHeight = imageHeight * yScale / 100
        return (layerHeight / 2) - (newImageHeight / 2)
    end
end

func imageScale(contentMode, layerSize, imageSize)
    var xScale = xImageScale(contentMode: contentMode, layerSize: layerSize, imageSize: imageSize)
    var yScale = yImageScale(contentMode: contentMode, layerSize: layerSize, imageSize: imageSize)
    return [xScale, yScale]
end

func xImageScale(contentMode, layerSize, imageSize)
    var imageWidth = imageSize.width
    var layerWidth = layerSize.width
    var imageHeight = imageSize.height
    var layerHeight = layerSize.height
    var widthtRatio = layerWidth / imageWidth
    var heightRatio = layerHeight / imageHeight
    
    switch contentMode.name
    case "resize":
        return 100 * layerWidth / imageWidth
    case "resizeAspect":
        return 100 * min(widthtRatio, heightRatio)
    case "resizeAspectFill":
        return 100 * max(widthtRatio, heightRatio)
    default: 
        return 100
    end
end

func yImageScale(contentMode, layerSize, imageSize)
    var imageWidth = imageSize.width
    var layerWidth = layerSize.width
    var imageHeight = imageSize.height
    var layerHeight = layerSize.height
    var widthtRatio = layerWidth / imageWidth
    var heightRatio = layerHeight / imageHeight

    switch contentMode.name
    case "resize":
        return 100 * layerHeight / imageHeight
    case "resizeAspect":
        return 100 * min(widthtRatio, heightRatio)
    case "resizeAspectFill":
        return 100 * max(widthtRatio, heightRatio)
    default: 
        return 100
    end
end

func min(_ lhs, _ rhs)
    if lhs < rhs
        return lhs
    else
        return rhs
    end
end

func max(_ lhs, _ rhs)
    if lhs > rhs
        return lhs
    else
        return rhs
    end
end