func dash(from layer, timeline)
    // dash array must contain dash pattern and dash pattern offset
    var dashArray = dashPatternComponents(from: layer, timeline: timeline)
    var offset = dashPatternOffset(from: layer, timeline: timeline)
    return dashArray.appending(offset)
        
end

func dashPatternComponents(from layer, timeline)
    var components = []
    for i in 0..<layer.dashPattern.count
        var component = dashPatternComponent(from: layer, timeline: timeline, component: i)
        components = components.appending(component)
    end

    return components
end

func dashPatternComponent(from layer, timeline, component)
    if component.truncatingRemainder(dividingBy: 2) == 0
        return [
            "n": "d",
            "nm": "dash\(component / 2)",
            "v": [
                "a": 0,
                "k": layer.dashPattern[component],
                "ix": component
            ]
        ]
    else
        return [
            "n": "g",
            "nm": "gap\((component - 1) / 2)",
            "v": [
                "a": 0,
                "k": layer.dashPattern[component],
                "ix": component
            ]
        ]
    end 
end

func dashPatternOffset(from layer, timeline)
    return [
        "n": "o",
        "nm": "offset",
        "v": dashPatternOffsetAnimation(layer: layer, timeline: timeline)
    ]
end