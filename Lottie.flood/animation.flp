func opacityAnimation(layer, timeline)
    return animation(layer: layer, propertyID: opacityProperty, timeline: timeline)
end

func rotationAnimation(layer, timeline)
    return animation(layer: layer, propertyID: transformRotationZProperty, timeline: timeline)
end

func positionAnimation(layer, timeline)
    return [
        "s": true, // seperate position dimensions into x and y components in order to animate them independently
        "x": xPositionAnimation(layer: layer, timeline: timeline),
        "y": yPositionAnimation(layer: layer, timeline: timeline)
    ]
end

func xPositionAnimation(layer, timeline)
    return animation(layer: layer, propertyID: positionXProperty, timeline: timeline)
end

func yPositionAnimation(layer, timeline)
    return animation(layer: layer, propertyID: positionYProperty, timeline: timeline)
end

func centerAnimation(layer, timeline)
	return animation(layer: layer, propertyID: centerProperty, timeline: timeline)
end

func anchorPointAnimation(layer, timeline)
    return animation(layer: layer, propertyID: anchorPointProperty, timeline: timeline)
end

func sizeAnimation(layer, timeline)
    return animation(layer: layer, propertyID: sizeProperty, timeline: timeline)
end

func borderSizeAnimation(layer, timeline)
    return animation(layer: layer, propertyID: borderSizeProperty, timeline: timeline)
end

func scaleAnimation()
    return scaleExpressionAnimation(xPropertyID: transformScaleXProperty, yPropertyID: transformScaleYProperty)
end

func scaleExpressionAnimation(xPropertyID, yPropertyID) 
    var scaleExpression = process("expression/scaleExpression.flt", into: nil, indentation: 0)
    return [
        "a": 0,
        "k": [100,100,100], // dummy scale value, scale animation is handled by the scale expression
        "ix": 6,
        "x": scaleExpression
    ]
end

func pathAnimation(layer, timeline)
	return animation(layer: layer, propertyID: combinedPathProperty, timeline: timeline) 
end

func strokeColorAnimation(layer, timeline)
	return animation(layer: layer, propertyID: strokeColorProperty, timeline: timeline)
end

func strokeOpacityAnimation(layer, timeline)
	return animation(layer: layer, propertyID: strokeOpacityProperty, timeline: timeline)
end

func strokeWidthAnimation(layer, timeline)
	return animation(layer: layer, propertyID: lineWidthProperty, timeline: timeline)
end

func fillColorAnimation(layer, timeline)
	return animation(layer: layer, propertyID: fillColorProperty, timeline: timeline)
end

func fillColorOpacityAnimation(layer, timeline)
	return animation(layer: layer, propertyID: fillColorOpacityProperty, timeline: timeline)
end

func backgroundColorAnimation(layer, timeline)
	return animation(layer: layer, propertyID: backgroundColorProperty, timeline: timeline)
end

func backgroundColorOpacityAnimation(layer, timeline)
	return animation(layer: layer, propertyID: backgroundColorOpacityProperty, timeline: timeline)
end

func strokeStartAnimation(layer, timeline)
    return animation(layer: layer, propertyID: strokeStartProperty, timeline: timeline)    
end

func strokeEndAnimation(layer, timeline)
    return animation(layer: layer, propertyID: strokeEndProperty, timeline: timeline)    
end

func dashPatternOffsetAnimation(layer, timeline)
    return animation(layer: layer, propertyID: lineDashPhaseProperty, timeline: timeline)    
end

func dashPatternAnimation(layer, timeline)
    return animation(layer: layer, propertyID: lineDashPatternProperty, timeline: timeline)
end

func borderRadiusAnimation(layer, timeline)
    return animation(layer: layer, propertyID: cornerRadiusProperty, timeline: timeline)
end

func borderColorAnimation(layer, timeline)
    return animation(layer: layer, propertyID: borderColorProperty, timeline: timeline)
end

func borderOpacityAnimation(layer, timeline)
    return animation(layer: layer, propertyID: borderColorOpacityProperty, timeline: timeline)
end

func borderWidthAnimation(layer, timeline)
    return animation(layer: layer, propertyID: borderWidthProperty, timeline: timeline)
end

func imageScaleAnimation(layer, timeline)
    return animation(layer: layer, propertyID: imageScaleProperty, timeline: timeline)
end

func animation(layer, propertyID, timeline)
    var keyvalues = kevaluesArray(layer: layer, propertyID: propertyID, timeline: timeline)
    var animationValue = keyvalues
    
    if keyvalues.isEmpty
        animationValue = propertyValue(layer: layer, propertyID: propertyID)
    end

    return [
        "a": animatedValue(layer: layer, propertyID: propertyID, timeline: timeline),
        "k": animationValue,
        "ix": propertyIndex(propertyID: propertyID)
    ]
end

func animatedValue(layer, propertyID, timeline)
    if isAnimated(layer: layer, propertyID: propertyID, timeline: timeline)
        return 1
    else
        return 0
    end
end

func isAnimated(layer, propertyID, timeline)
    var tracks = tracksFor(layer: layer, propertyID: propertyID, timeline: timeline)
    return !tracks.isEmpty
end

/// Returns the (Flow) tracks related to the Lottie property.
func tracksFor(layer, propertyID, timeline)
    var tracks = []

    switch propertyID
    case backgroundColorOpacityProperty:
        tracks = [timeline.trackFor(layer: layer, property: backgroundColorProperty)]
    case fillColorOpacityProperty:
        tracks = [timeline.trackFor(layer: layer, property: fillColorProperty)]
    case strokeOpacityProperty:
        tracks = [timeline.trackFor(layer: layer, property: strokeColorProperty)]
    case borderColorOpacityProperty:
        tracks = [timeline.trackFor(layer: layer, property: borderColorProperty)]
    case shadowColorOpacityProperty:
        tracks = [timeline.trackFor(layer: layer, property: shadowColorProperty)]
    case foregroundColorOpacityProperty:
        tracks = [timeline.trackFor(layer: layer, property: foregroundColorProperty)]
    case anchorPointProperty:
        tracks = [timeline.sizeTrack(layer: layer)]
    case shadowDistanceProperty:
        // don't animate shadow distance 
        tracks = []
    case shadowDirectionProperty:
        // don't animate shadow direction 
        tracks = []
    case sizeProperty:
        tracks = [timeline.sizeTrack(layer: layer)]
    case centerProperty:
        tracks = [timeline.sizeTrack(layer: layer)]
    case borderSizeProperty:
        tracks = [timeline.sizeTrack(layer: layer)]
    case imagePositionXProperty:
        tracks = [timeline.sizeTrack(layer: layer)]
    case imagePositionYProperty:
        tracks = [timeline.sizeTrack(layer: layer)]
    case imageScaleProperty:
        tracks = [timeline.sizeTrack(layer: layer)]
    default:
        tracks = [timeline.trackFor(layer: layer, property: propertyID)]
    end

    func notNil(element) return element != nil end
    return tracks.filter(notNil)
end

func propertyIndex(propertyID)
    switch propertyID
    case opacityProperty:
        return 11 
    case transformScaleXProperty:
        return 1
    case transformScaleYProperty:
        return 1
    case sizeProperty:
    	return 2
    case borderSizeProperty:
    	return 2
    case anchorPointProperty:
        return 1
    case transformRotationZProperty:
        return 10
    case positionXProperty:
        return 3
    case positionYProperty:
        return 4
    case centerProperty:
        return 3
    case combinedPathProperty:
    	return 2
    case strokeColorProperty:
    	return 3
    case lineWidthProperty:
    	return 5
    case strokeOpacityProperty:
    	return 4
    case fillColorProperty:
    	return 4
    case fillColorOpacityProperty:
    	return 5
    case backgroundColorProperty:
    	return 4
    case backgroundColorOpacityProperty:
    	return 5
    case strokeStartProperty:
        return 1
    case strokeEndProperty:
        return 2
    case lineDashPhaseProperty:
        return 7
    case lineDashPatternProperty:
        return 1
    case shadowColorProperty:
        return 1
    case shadowColorOpacityProperty:
        return 2
    case shadowRadiusProperty:
        return 5
    case cornerRadiusProperty:
        return 1
    case borderColorProperty:
        return 1
    case borderColorOpacityProperty:
        return 1
    case borderWidthProperty:
        return 1
    case shadowDirectionProperty:
        return 3
    case shadowDistanceProperty:
        return 3
    case foregroundColorProperty:
        return 12
    case foregroundColorOpacityProperty:
        return 10
    case imagePositionXProperty:
        return 3
    case imagePositionYProperty:
        return 4
    case imageScaleProperty:
        return 1
    default:
        return nil
    end
end