func shapeLayerProperties(layer, timeline, type)
    return [
        "shapes": shapesArray(layer: layer, timeline: timeline, type: type)
    ]

end

func shapesArray(layer, timeline, type)
    return [shape(layer: layer, timeline: timeline, type: type)]
end

func shape(layer, timeline, type)
    return [ 
        "ty": "gr", // 'group' shape type
        "it": shapeElements(layer: layer, timeline: timeline, type: type),
        "nm": layerName(layer: layer, type: type),
        "np": numberOfProperties(),
        "cix": 2,
        "bm": 0,
        "ix": 1,
        "mn": "ADBE Vector Group",
        "hd": hidden(layer: layer)
    ]
end

func numberOfProperties()
    return 3
end

func shapeElements(layer, timeline, type)
    switch type
    case "content":
        return [
            pathElement(layer: layer, timeline: timeline),
            fillElement(layer: layer, timeline: timeline),
            transformElement(layer: layer, timeline: timeline)
        ]
    case "stroke":
        return [
            pathElement(layer: layer, timeline: timeline),
            strokeElement(layer: layer, timeline: timeline),
            trimElement(layer: layer, timeline: timeline),
            transformElement(layer: layer, timeline: timeline)
        ]
    case "background":
        return [
            backgroundElement(layer: layer, timeline: timeline),
            roundedCornersElement(layer: layer, timeline: timeline),
            backgroundColorElement(layer: layer, timeline: timeline),
            transformElement(layer: layer, timeline: timeline)
        ]
    case "border":
        return [
            borderElement(layer: layer, timeline: timeline),
            roundedCornersElement(layer: layer, timeline: timeline),
            borderStrokeElement(layer: layer, timeline: timeline),
            transformElement(layer: layer, timeline: timeline)
        ]
    case "mask":
        return [
            backgroundElement(layer: layer, timeline: timeline),
            maskColorElement(layer: layer, timeline: timeline),
            transformElement(layer: layer, timeline: timeline)
        ]
    end
end

func borderElement(layer, timeline)
    return [
        "ty": "rc", // 'rect' shape type
        "d": 1, // direction
        "p": centerAnimation(layer: layer, timeline: timeline),
        "r": [ "a": 0, "k": 0, "ix": 4], // rounded corners (none)
        "nm": layerName(layer: layer, type: "border"),
        "mn": "ADBE Vector Shape - Rect",
        "hd": hidden(layer: layer),
        "s": [
            "a": 0,
            "k": propertyValue(layer: layer, propertyID: "border.size"), // initial value of size
            "ix": 6
        ]
    ]
end

func backgroundElement(layer, timeline)
    return [
        "ty": "rc", // 'rect' shape type
        "d": 1, // direction
        "p": centerAnimation(layer: layer, timeline: timeline),
        "r": [ "a": 0, "k": 0, "ix": 4], // rounded corners (none)
        "nm": layerName(layer: layer, type: "background"),
        "mn": "ADBE Vector Shape - Rect",
        "hd": hidden(layer: layer),
        "s": [
            "a": 0,
            "k": [layer.bounds.width, layer.bounds.height], // initial value of size
            "ix": 6
        ]
    ]
end

func roundedCornersElement(layer, timeline)
    return [
        "ty": "rd",
        "nm": "Round Corners 1",
        "r": borderRadiusAnimation(layer: layer, timeline: timeline),
        "ix": 2,
        "mn": "ADBE Vector Filter - RC",
        "hd": hidden(layer: layer)
    ]
end

func backgroundColorElement(layer, timeline)
    return [
        "ty": "fl",
        "c": backgroundColorAnimation(layer: layer, timeline: timeline),
        "o": backgroundColorOpacityAnimation(layer: layer, timeline: timeline),
        "r": 1,
        "bm": 0,
        "nm": "Fill 1",
        "mn": "ADBE Vector Graphic - Fill",
        "hd": hidden(layer: layer)
    ]
end

func maskColorElement(layer, timeline)
    var opacity = 100
    if layer.masksToBounds == false
        // if there is no masking, we want to hide the mask layer, so we set the alpha to 0
        opacity = 0
    end
    return [
        "ty": "fl",
        "c": ["a": 0.0,"ix": 4.0,"k": [0.0,0.0,0.0]],
        "o": ["a": 0.0,"ix": 5.0,"k": opacity],
        "r": 1,
        "bm": 0,
        "nm": "Fill 1",
        "mn": "ADBE Vector Graphic - Fill",
        "hd": hidden(layer: layer)
    ]
end

func transformElement(layer, timeline)
    return [
        "ty": "tr",
        "p": ["a": 0,"k": [0,0],"ix": 2], // position
        "a": ["a": 0,"k": [0,0],"ix": 1], // anchor point
        "s": ["a": 0,"k": [100,100],"ix": 6], // scale
        "r": ["a": 0,"k": 0,"ix": 2], // rotation
        "o": ["a": 0,"k": 100,"ix": 7], // opacity
        "sk": ["a": 0,"k": 0,"ix": 4], // skew
        "sa": ["a": 0,"k": 0,"ix": 5], // skew axis
        "nm": "Transform"
    ]
end

// Shape Layer Elements

func pathElement(layer, timeline)
    return [ 
        "ind": 0,
        "ty": "sh", // 'shape' shape type
        "ix": 1,
        "ks": pathAnimation(layer: layer, timeline: timeline),
        "nm": layerName(layer: layer, type: "path"),
        "mn": "ADBE Vector Shape - Group",
        "hd": hidden(layer: layer)
    ]
end

func borderStrokeElement(layer, timeline)
    return [
        "ty": "st",
        "c": borderColorAnimation(layer: layer, timeline: timeline),
        "o": borderOpacityAnimation(layer: layer, timeline: timeline),
        "w": borderWidthAnimation(layer: layer, timeline: timeline),
        "lc": 1, // linecap
        "lj": 1, // linejoin
        "ml": 4, // miter limit
        "bm": 0,
        "nm": "Stroke 1",
        "mn": "ADBE Vector Graphic - Stroke",
        "hd": hidden(layer: layer)
    ]
end

func strokeElement(layer, timeline)
    return [
        "ty": "st",
        "c": strokeColorAnimation(layer: layer, timeline: timeline),
        "o": strokeOpacityAnimation(layer: layer, timeline: timeline),
        "w": strokeWidthAnimation(layer: layer, timeline: timeline),
        "lc": lineCap(from: layer), // linecap
        "lj": lineJoin(from: layer), // linejoin
        "ml": layer.miterLimit, // miter limit
        "bm": 0,
        "nm": "Stroke 1",
        "mn": "ADBE Vector Graphic - Stroke",
        "hd": hidden(layer: layer),
        "d": dash(from: layer, timeline: timeline)
    ]
end

func lineCap(from layer)
    switch layer.lineCap.name
    case "butt":
        return 1
    case "round":
        return 2
    case "square":
        return 3
    end
end

func lineJoin(from layer)
    switch layer.lineJoin.name
    case "miter":
        return 1
    case "round":
        return 2
    case "bevel":
        return 3
    end 
end


func fillElement(layer, timeline) 
    return [
        "ty": "fl",
        "c": fillColorAnimation(layer: layer, timeline: timeline),
        "o": fillColorOpacityAnimation(layer: layer, timeline: timeline),
        "r": 1,
        "bm": 0,
        "nm": "Fill 1",
        "mn": "ADBE Vector Graphic - Fill",
        "hd": hidden(layer: layer)
    ]
end

func trimElement(layer, timeline)
    return [
        "ty": "tm",
        "s": strokeStartAnimation(layer: layer, timeline: timeline),
        "e": strokeEndAnimation(layer: layer, timeline: timeline),
        "o": [
            "a": 0,
            "k": 0,
            "ix": 3
        ],
        "ix": 3,
        "nm": "Trim Paths 1",
        "mn": "ADBE Vector Filter - Trim",
        "hd": false
    ]
end