import Web

var escape = false

for timeline in timelines
    // Get a snapshot of the rootLayer at time 0
    var layer = timeline.rootLayer(at: 0)

    // Get the name of the timeline folder
    var timelineFolder = folderTable.symbolForID(timeline.id, "\(outputFolderPath)/\(documentFolderName)/\(templateFolderName)").name

    // Get the timeline output path
    var timelineOutputPath = "\(documentFolderName)/\(templateFolderName)/\(timelineFolder)"

    // Set the name for the html & css files to the name of the timeline
    var timelineName = timelineFolder
    var forwardTimelineName = "\(timelineName)Timeline"
    var timelineComponentName = "\(timelineName)Component"
    var timelineNameLowercased = timelineName.lowercased()
    var customElementName = "\(timelineNameLowercased)-button"
    var resourcesPath = "\(timelineNameLowercased)ResourcesPath"
    var reverseTimelineName = "\(timelineName)ReverseTimeline"
    var timelineToggleButtonName = "\(timelineNameLowercased)ToggleButton.js"
    var buttonID = "\(timelineName)-ButtonID"

    //Encapsulated ID of the shadow dom container. Hardcoded on purpose do not change.
    var containerID = "flowComponentContainerID"

    //Import image file or generate path to image file
    var importImage = true

    // Get all assets for this timeline
    var fontsInTimeline = document.fonts(forTimeline: timeline)
    var imagesInTimeline = document.images(forTimeline: timeline)

    // Folder names 
    var imageFolderName = "img"
    var fontFolderName = "fonts"
    var jsFolderName = "js"
    var cssFolderName = "css"
    var commonFolderName = "FlowCommon"

    // The absolute paths to use when reference assets in the image, font, js or css folders
    var imageFolderAbsPath = "\(baseUrl)/\(imageFolderName)"
    var fontFolderAbsPath = "\(baseUrl)/\(fontFolderName)"
    var jsFolderAbsPath = "\(baseUrl)/\(jsFolderName)"
    var cssFolderAbsPath = "\(baseUrl)/\(cssFolderName)"

    // Delete previously exported project
    rm(timelineOutputPath)

    // Create output directories
    mkdir("\(timelineOutputPath)/\(imageFolderName)")
    mkdir("\(timelineOutputPath)/\(cssFolderName)")
    mkdir("\(timelineOutputPath)/\(jsFolderName)")
    mkdir("\(timelineOutputPath)/\(fontFolderName)")
    mkdir("\(timelineOutputPath)/\(commonFolderName)")

    var shapeIDs = []
    var timerID = "timer-\(timelineName.lowerCamelCased())"

    process("component.js.flt", into: "\(timelineOutputPath)/js/\(timelineComponentName).js", indentation: 0)
    process("css/style.css.flt", from: Web, into: "\(timelineOutputPath)/\(cssFolderName)/\(timelineName).css", indentation: 0)
    process("button/buttonWrapper.js.flt", into: "\(timelineOutputPath)/js/\(timelineName).js", indentation: 0)
    process("button/index.js.flt", into: "\(timelineOutputPath)/index.js", indentation: 0)
    
    // Generate Forward Timeline
    var timelineClassName =  forwardTimelineName
    process("timeline.js.flt", into: "\(timelineOutputPath)/\(jsFolderName)/\(forwardTimelineName).js", indentation: 0)
    copy(from: "../Packages/web/templates/js/web-animations.min.js", to: "\(timelineOutputPath)/\(commonFolderName)/web-animations.min.js") 
    copy(from: "../Packages/web/templates/js/components/flowCommon.js", to: "\(timelineOutputPath)/\(commonFolderName)/flowCommon.js")
    copy(from: "../Packages/web/templates/js/components/ReactToggleButton.js", to: "\(timelineOutputPath)/\(commonFolderName)/ToggleButton.js")
    process("player.js.flt", into: "\(timelineOutputPath)/\(commonFolderName)/player.js", indentation: 0)
    process("js/components/ReactAnimation.js.flt", from: Web, into: "\(timelineOutputPath)/\(commonFolderName)/Animation.js", indentation: 0)
    process("js/components/ReactTrack.js.flt", from: Web, into: "\(timelineOutputPath)/\(commonFolderName)/Track.js", indentation: 0)

    // Copy Images
    for image in imagesInTimeline
        var imageData = image.serializeAsPNGData()
        if imageData != nil 
            write(data: imageData, to: "\(timelineOutputPath)/\(imageFolderName)/\(image.name).png")
        end
    end

    // Copy Fonts
    for font in fontsInTimeline
        if !Web.webFonts.contains(font.name) && font.path != nil
            copy(from: font.path, to: "\(timelineOutputPath)/\(fontFolderName)/\(font.name).\(font.extension)")
        end
    end

    // Generate README
    escape = true
    process("README.html.flt", into: "\(timelineOutputPath)/README.html", indentation: 0)
    escape = false

    // Generate Reverse Timeline
    timelineClassName =  reverseTimelineName
    timeline = timeline.reversed
    layer = timeline.rootLayer(at: 0)
    process("timeline.js.flt", into: "\(timelineOutputPath)/\(jsFolderName)/\(reverseTimelineName).js", indentation: 0)

    // Clear the symbol table
    symbolTable.removeAllSymbols()
end
