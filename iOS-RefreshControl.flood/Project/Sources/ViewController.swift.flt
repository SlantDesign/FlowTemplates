// Made With Flow

import UIKit

class ViewController: UIViewController, UIScrollViewDelegate {
    struct Defaults {
        static let offsetThreshold: CGFloat = -150
    }

    @IBOutlet var scrollView: UIScrollView!

<%- var viewVariableName = timeline.scene.name.lowerCamelCased() -%>

    let <%= viewVariableName %>RefreshControl = <%= refreshControlClassName %>()
    private(set) var defaultOffset: CGFloat = 0
    private(set) var hasSetDefault = false

    override func viewDidLoad() {
        super.viewDidLoad()

        scrollView.refreshControl = <%= viewVariableName %>RefreshControl
        scrollView.delegate = self
        <%= viewVariableName %>RefreshControl.setup() //needs to be run after the control has been added to the view hierarchy

        <%= viewVariableName %>RefreshControl.addTarget(self, action: #selector(refresh), for: .valueChanged)
    }

    //simulate refreshing
    @objc func refresh() {
        DispatchQueue.main.asyncAfter(deadline: .now() + 3) {
            self.updateData()
        }
    }

    //load new data, then provide a signal to end refreshing
    func updateData() {
        scrollView.refreshControl?.endRefreshing()
    }

    func handle(offset: CGFloat) {
        // the first time the scrollview is loaded, set the default offset
        if !hasSetDefault {
            hasSetDefault = true
            defaultOffset = offset
        }

        // when the tableview is pulled down further than it's default y position
        // normalized the offset and pass it to the custom refresh control
        if offset < defaultOffset {
            let actualOffset = offset - defaultOffset
            let normalizedOffset = actualOffset / Defaults.offsetThreshold
            <%= viewVariableName %>RefreshControl.process(offset: normalizedOffset)
        }
    }

    func scrollViewDidScroll(_ scrollView: UIScrollView) {
        handle(offset: scrollView.contentOffset.y)
    }
}
