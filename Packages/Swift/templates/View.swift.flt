<%- import Swift -%>
// Made With Flow.
//
// DO NOT MODIFY, your changes will be lost when this file is regenerated.
//

import UIKit

@IBDesignable
public class <%= viewName %>: UIView {
    public struct Defaults {
        public static let size = <%= code(initialRootSnapshot.bounds.size, layer: initialRootSnapshot) %>
        public static let backgroundColor = <%= code(initialRootSnapshot.backgroundColor, layer: initialRootSnapshot) %>
    }

<%- for snapshot in initialRootSnapshot.descendants
        if snapshot.type.name == "path"
            continue
        end
        var suggestedName = snapshot.name.lowerCamelCased()
        var className = viewClassName(of: snapshot.type)
        var symbol = symbolTable.addSymbolWithSuggestedName(suggestedName, type: className, context: "", id: snapshot.id)
-%>
    public var <%= symbol.name %>: <%= className %>!
<%- end -%>

    public override var intrinsicContentSize: CGSize {
        return Defaults.size
    }

    public override init(frame: CGRect) {
        super.init(frame: frame)
        setup()
    }

    public required init?(coder: NSCoder) {
        super.init(coder: coder)
        setup()
    }

    private func setup() {
        backgroundColor = Defaults.backgroundColor
        clipsToBounds = <%= initialRootSnapshot.masksToBounds %>
        createViews()
        addSubviews()
        layer.name = "sceneLayer"
        //scale(to: frame.size)
    }

    /// Scales `self` and its subviews to `size`.
    ///
    /// - Parameter size: The size `self` is scaled to.
    ///
    /// UIKit specifies: "In iOS 8.0 and later, the transform property does not affect Auto Layout. Auto layout
    /// calculates a view's alignment rectangle based on its untransformed frame."
    ///
    /// see: https://developer.apple.com/documentation/uikit/uiview/1622459-transform
    ///
    /// If there are any constraints in IB affecting the frame of `self`, this method will have consequences on
    /// layout / rendering. To properly scale an animation, you will have to position the view manually.
    public func scale(to size: CGSize) {
        let x = size.width / Defaults.size.width
        let y = size.height / Defaults.size.height
        transform = CGAffineTransform(scaleX: x, y: y)
    }

    private func createViews() {
        CATransaction.suppressAnimations {
        <%- for snapshot in initialRootSnapshot.descendants -%>
            <%- if snapshot.type.name == "path" continue end -%>
            <%- var symbol = symbolTable.symbolForID(snapshot.id, "") -%>
            create<%= symbol.name.upperCamelCased() %>()
        <%- end -%>
        }
    }

    <%- for snapshot in initialRootSnapshot.descendants -%>
        <%- if snapshot.type.name == "path" continue end -%>
        <%- var symbol = symbolTable.symbolForID(snapshot.id, "") -%>
    private func create<%= symbol.name.upperCamelCased() %>() {
        <%- insert("Layer/BaseLayer.swift.flt", from: Swift, indentation: 2) -%>
    }

    <%- end -%>
    private func addSubviews() {
        <%-
        // Add descendant views of sceneView
        for snapshot in initialRootSnapshot.sublayers
            Swift.addDescendantViews(of: snapshot, symbolTable: symbolTable)
        end
        // Add direct SubViews to sceneView
        for snapshot in initialRootSnapshot.sublayers
            if snapshot.type.name == "path" continue end
            var symbol = symbolTable.symbolForID(snapshot.id, "") -%>
        addSubview(<%= symbol.name %>)
        <%- end -%>
    }
}
