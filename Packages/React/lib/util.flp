/// Returns the css property name for the provided property.
func jsPropertyName(property)
  switch property.id
  case "position.x": return "left"
  case "position.y": return "top"
  case "bounds.size.width": return "width"
  case "bounds.size.height": return "height"
  case "anchorPoint.x": return "transform"
  case "anchorPoint.y": return "transform"
  case "transform.rotation.z": return "transform"
  case "opacity": return "opacity"
  case "backgroundColor": return "backgroundColor"
  case "borderWidth": return "borderWidth"
  case "borderColor": return "borderColor"
  case "cornerRadius": return "borderRadius"
  case "shadowColor": return "boxShadow"
  case "shadowRadius": return "boxShadow"
  case "shadowOffset.width": return "boxShadow"
  case "shadowOffset.height": return "boxShadow"
  case "resizing.margin.top": return "top"
  case "resizing.margin.left": return "left"
  case "resizing.margin.bottom": return "bottom"
  case "resizing.margin.right": return "right"
  case "transform.scale.x": return "transform"
  case "transform.scale.y": return "transform"

  // Image
  case "image": return "backgroundImage"
  case "contentsGravity": return ""

  // Path
  case "path": return ""
  case "operation": return ""

  // Shape
  case "combinedPath": return ""
  case "fillColor": return "fill"
  case "strokeColor": return "stroke"
  case "lineWidth": return "strokeWidth"
  case "strokeStart": return "strokeDashoffset"
  case "strokeEnd": return "strokeDashoffset"
  case "miterLimit": return "strokeMiterlimit"
  case "lineCap": return "strokeLinecap"
  case "lineJoin": return "strokeLinejoin"
  case "fillGradient": return ""
  case "fillImage": return ""
  case "lineDashPattern": return "strokeDasharray"
  case "lineDashPhase": return "strokeDashoffset"

  // Shape Mask
  case "maskPath": return ""

  // Text
  case "string": return ""
  case "alignmentMode": return "textAlign"
  case "font": return "fontFamily"
  case "fontSize": return "fontSize"
  case "foregroundColor": return "color"
  case "truncationMode": return "textOverflow"
  end
end

/// Formats a property value as CSS.
func cssValue(property, value, layer, imageFolderPath, importImage)
  switch property.id
  case "position.x": return "'\(value)px'"
  case "position.y": return "'\(value)px'"
  case "bounds.size.width": return "'\(value)px'"
  case "bounds.size.height": return "'\(value)px'"
  case "anchorPoint.x": return "'\(cssTransform(of: layer)) translate(-\(value * 100)%, 0)'"
  case "anchorPoint.y": return "'\(cssTransform(of: layer)) translate(0, \(100 * value)%)'"
  case "transform.rotation.z": return "'\(cssTransform(of: layer)) rotate(\(value.degrees)deg)'"
  case "opacity": return "\(value)"
  case "backgroundColor": return "'\(value.hex)'"
  case "borderWidth": return "'\(value)px'"
  case "borderColor": return "'\(value.hex)'"
  case "cornerRadius": return "'\(value)px'"
  case "shadowColor": return ""
  case "shadowRadius": return ""
  case "shadowOffset.width": return ""
  case "shadowOffset.height": return ""
  case "resizing.margin.top": return "'\(value)px'"
  case "resizing.margin.left": return "'\(value)px'"
  case "resizing.margin.bottom": return "'\(value)px'"
  case "resizing.margin.right": return "'\(value)px'"
  case "transform.scale.x": return "'\(cssTransform(of: layer)) scale(\(value), 1)'"
  case "transform.scale.y": return "'\(cssTransform(of: layer)) scale(1, \(value))'"

  // Image
  case "image":
    return cssImage(image: value, importImage: importImage)
  case "contentsGravity": return ""

  // Path
  case "path": return ""
  case "operation": return ""

  // Shape
  case "combinedPath": return ""
  case "fillColor": return "'\(value.hex)'"
  case "strokeColor": return "'\(value.hex)'"
  case "lineWidth": return "'\(value)px'"
  case "strokeStart": return "\(value)"
  case "strokeEnd": return "-\(value)"
  case "miterLimit": return "\(value)"
  case "lineCap": return "'\(value)'"
  case "lineJoin": return "'\(value)'"
  case "fillGradient": return ""
  case "fillImage": return ""
  case "lineDashPattern": return "'\(printDashPatternArray(value))'"
  case "lineDashPhase": return "'\(value)px'"

  // Shape Mask
  case "maskPath": return ""

  // Text
  case "alignmentMode": return "'\(cssAlign(value))'"
  case "string": return "\"\(value)\""
  case "font": return "\"\(value.name)\""
  case "fontSize": return "'\(value)px'"
  case "foregroundColor": return "'\(value.hex)'"
  case "truncationMode": return "'\(value)'"
  end
end

/// Formats a property and value as CSS.
func cssPropertyDecl(property, value, layer)
  switch property.id
  case "position.x": return "left: \(value)px"
  case "position.y": return "top: \(value)px"
  case "bounds.size.width": return "width: \(value)px"
  case "bounds.size.height": return "height: \(value)px"
  case "anchorPoint.x": return "transform-origin: \(100 * layer.anchorPoint.x)% 50%"
  case "anchorPoint.y": return "transform-origin: 50% \(100 * layer.anchorPoint.y)%"
  case "transform.rotation.z": return "transform: rotate(\(value.degrees)deg)"
  case "opacity": return "opacity: \(value)"
  case "backgroundColor": return "background-color: \(value.hex)"
  case "borderWidth": return "border-style: solid; border-width: \(value)px"
  case "borderColor": return "border-color: \(value.hex)"
  case "cornerRadius": return "border-radius: \(value)px"
  case "shadowColor": return "filter: drop-shadow(\(layer.shadowOffset.width)px \(layer.shadowOffset.height)px \(layer.shadowRadius)px \(value.hex))"
  case "shadowRadius": return "filter: drop-shadow(\(layer.shadowOffset.width)px \(layer.shadowOffset.height)px \(value)px \(layer.shadowColor.hex))"
  case "shadowOffset.width": return "filter: drop-shadow(\(value)px \(layer.shadowOffset.height)px \(layer.shadowRadius)px \(layer.shadowColor.hex))"
  case "shadowOffset.height": return "filter: drop-shadow(\(layer.shadowOffset.width)px \(value)px \(layer.shadowRadius)px \(layer.shadowColor.hex))"
  case "resizing.margin.top": return "top: \(value)px"
  case "resizing.margin.left": return "left: \(value)px"
  case "resizing.margin.bottom": return "bottom: \(value)px"
  case "resizing.margin.right": return "right: \(value)px"
  case "transform.scale.x": return "transform: scale(\(value), 1)"
  case "transform.scale.y": return "transform: scale(1, \(value))"

  // Image
  case "image": return "src: \"\(value.name)\""
  case "contentsGravity": return ""

  // Path
  case "path": return ""
  case "operation": return ""

  // Shape
  case "combinedPath": return ""
  case "fillColor": return "fill: \(value.hex)"
  case "strokeColor": return "stroke: \(value.hex)"
  case "lineWidth": return "stroke-width: \(value)px"
  case "strokeStart": return "stroke-dashoffset: \(value)"
  case "strokeEnd": return ""
  case "miterLimit": return "stroke-miterlimit: \(value)"
  case "lineCap": return "stroke-linecap: \(value)"
  case "lineJoin": return "stroke-linejoin: \(value)"
  case "fillGradient": return ""
  case "fillImage": return ""
  case "lineDashPattern": return "stroke-dasharray: \(Web.printDashPatternArray(value))"
  case "lineDashPhase": return "stroke-dashoffset: \(value)"

  // Shape Mask
  case "maskPath": return ""

  // Text
  case "alignmentMode": return "text-align: \(cssAlign(value))"
  case "string": return ""
  case "font": return "font-family: \"\(value.name)\""
  case "fontSize": return "font-size: \(value)px"
  case "foregroundColor": return "color: \(value.hex)"
  case "truncationMode": return "text-overflow: \(value)"
  end
end

// Returns the a list of the keyvalues times in milli seconds
func animationTimes(of keyvalues)
  var times = []
  for keyvalue in keyvalues
    times = times.appending(keyvalue.time * 1000)
  end
  return times
end


// Returns timing functions for the keyvalues
func timingFunctions(keyvalues)
  var timingFunctions = []
  for keyvalue in keyvalues
    var timingFunction = cssTimingFunction(of: keyvalue.trailingTimingFunction).inQuotes()
    timingFunctions = timingFunctions.appending(timingFunction)
  end

  return timingFunctions
end


// Returns the css timing function of the animation starting at `keyvalue`.
func timing(keyvalue)
  return "'\(cssTimingFunction(of: keyvalue.trailingTimingFunction))'"
end

/// Returns the CSS timing function name for a timing function
func cssTimingFunction(of tf)
  switch tf.name
    case "Linear": return "linear"
    case "Ease In": return "ease-in"
    case "Ease Out": return "ease-out"
    case "Ease In, Ease Out": return "ease-in-out"
    // Use dirrent representations of step-end to differentiate between Step Right and Step Middle and Step Left
    // so that Animation.js object can adjust the duration
    case "Step Left": return "steps(1,end)"
    case "Step Right": return "step-end"
    case "Step Middle": return "steps(1)"
    case "Custom":
      var c1 = tf.controlPoints[0]
      var c2 = tf.controlPoints[1]  
      return "cubic-bezier(\(c1.x), \(c1.y), \(c2.x), \(c2.y))"
  end
end

/// Returns half durations for steps 
func animationDuration(dur, of tf) 
  switch tf.name
    case "Linear": return dur
    case "Ease In": return dur
    case "Ease Out": return dur
    case "Ease In, Ease Out": return dur
    case "Step Left": return 1
    case "Step Right": return (dur - 1)
    case "Step Middle": return (dur / 2.0)
    case "Custom": return dur
  end
end

/// Returns an animation string for an animation.
func cssAnimation(_ group)
  var groupName = animationGroupName(of: group)
  if group.timingFunction == "Step Middle"
    // CSS doesn't support step middle so we use step-end and halve the duration
    return "\(groupName) \(group.duration/2)s step-end \(group.beginTime)s both"
  else
    return "\(groupName) \(group.duration)s \(cssTimingFunction(of: group.timingFunction)) \(group.beginTime)s both"
  end
end

/// Returns a unique animation name for the given animation.
func animationGroupName(of group)
  var symbol = symbolTable.symbolForID(group.id, "animation")
  if symbol == nil
    var suggestedName = "animation"
    symbol = symbolTable.addSymbolWithSuggestedName(suggestedName, type: "id", context: "animation", id: group.id)
  end
  return symbol.name
end

/// Returns the CSS transform string for a layer.
func cssTransform(of layer)
  var transform = "translate(-\(layer.anchorPoint.x * 100)%, -\(layer.anchorPoint.y * 100)%)"
  transform = "\(transform) rotate(\(layer.rotation.degrees)deg)"
  if layer.flippedHorizontal != 1 || layer.flippedVertical != 1
    transform = "\(transform) scale(\(layer.flippedHorizontal), \(layer.flippedVertical))"
  end
  return transform
end

/// Returns the CSS transform string for the given parameters.
func cssTransformFormValues(anchorX, anchorY, scaleX, scaleY, rotation)
  var transform = "translate(-\(anchorX * 100)%, -\(anchorY * 100)%)"
  transform = "\(transform) rotate(\(rotation.degrees)deg)"
  if scaleX != 1 || scaleY != 1
    transform = "\(transform) scale(\(scaleX), \(scaleY))"
  end
  return transform
end

func cssAnchorPointValues(anchorX, anchorY)
  return "\(100 * anchorX)% \(100 * anchorY)%"
end 

func cssShadow(offsetX, offsetY, radius, color)
  return "\(offsetX)px \(offsetY)px \(radius)px \(color.hex)"
end

func cssAlign(_ value)
  switch value.name
  case "natural": return "initial"
  case "left": return "left"
  case "right": return "right"
  case "center": return "center"
  case "justified": return "justify"
  end
end

func cssBackgroundPosition(_ value)
  switch value.name
    case "center": return "center"
    case "top": return "center top"
    case "bottom": return "center bottom"
    case "left": return "left"
    case "right": return "right"
    case "topLeft": return "left top"
    case "topRight": return "right top"
    case "bottomLeft": return "left bottom"
    case "bottomRight": return "right bottom"
    case "resize": return "center"
    case "resizeAspect": return "center"
    case "resizeAspectFill": return "center"
  end
end

func cssBackgroundSize(_ value)
  switch value.name
    case "center": return "auto"
    case "top": return "auto"
    case "bottom": return "auto"
    case "left": return "auto"
    case "right": return "auto"
    case "topLeft": return "auto"
    case "topRight": return "auto"
    case "bottomLeft": return "auto"
    case "bottomRight": return "auto"
    case "resize": return "100% 100%"
    case "resizeAspect": return "contain"
    case "resizeAspectFill": return "cover"
  end
end

func cssImage(image, importImage)
  if importImage
    return "`url(${\(image.name)})`"
  else
    return "`url(${this.imagesFolderPath}/\(image.name).png)`"
  end
end

func gradientTag(_ gradient)
    switch gradient.type
    case "linear":
      return "linearGradient"
    case "radial":
      return "radialGradient"
    end
end

func gradientAttributes(_ gradient)
    switch gradient.type
    case "linear": 
        var x1 = gradient.from.x
        var y1 = gradient.from.y
        var x2 = gradient.to.x
        var y2 = gradient.to.y 
        return "x1=\"\(x1)\" y1=\"\(y1)\" x2=\"\(x2)\" y2=\"\(y2)\""
    case "radial":
        var r = gradient.radius
        var x = gradient.from.x
        var y = gradient.from.y
        var scaleX = gradient.ellipseAspectRatio
        var cx = x / scaleX
        var fx = cx
        var gradientTransform = "translate(0.5, 0.5) scale(\(scaleX), 1) translate(\(-0.5 / scaleX), -0.5)"
        return "r=\"\(r)\" cx=\"\(cx)\" cy=\"\(y)\" fx=\"\(fx)\" fy=\"\(y)\" gradientTransform=\"\(gradientTransform)\""
    end
end

/// If relative is true returns the relativePath else returns the absolutePath
func pathPrefix(relativePath, absolutePath, relative)
  if relative
    return relativePath
  else 
    return absolutePath
  end
end

func svgAnimationKeysplines(track)
  var keysplines = []
  for animation in track.animationsFromKeyvaluesWithSimulatedSteps
    var c1 = animation.timingFunction.controlPoints[0]
    var c2 = animation.timingFunction.controlPoints[1]
    keysplines = keysplines.appending("\(c1.x) \(c1.y) \(c2.x) \(c2.y)")
  end
  return keysplines
end


func svgAnimationKeytimes(track, duration)
  var keytimes = []
  for keyvalue in track.keyvaluesWithSimulatedSteps
    keytimes = keytimes.appending(keyvalue.time / duration)
  end
  return keytimes
end

func svgAnimationValues(attributeName, from track)
  var values = []
  for keyvalue in track.keyvaluesWithSimulatedSteps
    values = values.appending(svgAnimationValue(attributeName: attributeName, from: keyvalue))
  end
  return values
end

func svgAnimationValue(attributeName, from keyvalue)
  switch attributeName
  case "d":
    var size = keyvalue.timeline.value(property: "size", layer: keyvalue.track.layer, time: 0)
    return keyvalue.value.svgc(width: size.width, height: size.height)

  case "viewBox":
    var size = keyvalue.timeline.value(property: "size", layer: keyvalue.track.layer, time: 0)
    return "0 0 \(size.width) \(size.height)"

  case "fill":
    return keyvalue.value.hex

  case "stroke-width":
    return keyvalue.value

  default:
    return nil
  end
end

func imagePath(image, importImage, relativePath, imageFolderAbsPath, relative)
  if importImage
    return "${\(image.name)}"
  else
    return pathPrefix(relativePath: relativePath, absolutePath: imageFolderAbsPath, relative: relative).appending("/\(image.name).png")
  end
end

func elementIDFor(layer, symbolTable)
  var symbol = symbolTable.symbolForID(layer.id, "")
  if symbol == nil
      symbol = symbolTable.addSymbolWithSuggestedName(layer.name.snakeCased(), type: "id", context: "", id: layer.id)
  end
  return symbol.name
end

func elementIDForMask(layer, symbolTable, timeline)
  var symbol = symbolTable.symbolForID(layer.id, "mask")
  if symbol == nil
      symbol = symbolTable.addSymbolWithSuggestedName("\(timeline.name.snakeCased())-\(layer.name.snakeCased())-mask", type: "id", context: "mask", id: layer.id)
  end
  return symbol.name
end

func trackName(propertyName, id)
  return "\(id)_\(propertyName.snakeCased())Track"
end
