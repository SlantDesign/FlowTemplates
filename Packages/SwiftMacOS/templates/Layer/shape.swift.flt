<%= symbol.name %>.name = "<%= symbol.name %>.shapeLayer"
<%= symbol.name %>.fillRule = CAShapeLayerFillRule.evenOdd
<%- if snapshot.strokeColor != Color.clear -%>
<%= symbol.name %>.strokeColor = <%= SwiftMacOS.code(snapshot.strokeColor, layer: snapshot) %>.cgColor
<%- end -%>
<%- if snapshot.currentFillType == "Gradient" -%>
<%= symbol.name %>.fillColor = nil
<%- else if snapshot.currentFillType == "Image" -%>
let mask = CAShapeLayer()
mask.path = <%= SwiftMacOS.code(snapshot.path, layer: snapshot) %>
mask.fillColor = <%= prefix %>Color.black.cgColor
<%= symbol.name %>.mask = mask
let image = <%= prefix %>Image(named: "<%= snapshot.fillImage.image.name %>")!
<%- switch snapshot.fillImage.patternFillType
    case 0: -%>
let size = CGSize(width: <%= snapshot.fillImage.tileSize.height %>, height: <%= snapshot.fillImage.tileSize.height %>)
let newImage = image.resized(to: size)
if newImage != nil {
<%= symbol.name %>.fillColor = <%= prefix %>Color(patternImage: newImage!).cgColor
}
<%= symbol.name %>.contents = nil
<%= symbol.name %>.masksToBounds = false
<%- case 1: -%>
<%= symbol.name %>.contents = image.cgImage
<%= symbol.name %>.fillColor = <%= prefix %>Color.clear.cgColor
<%= symbol.name %>.contentsGravity = CALayerContentsGravity.resizeAspectFill
<%= symbol.name %>.masksToBounds = true
<%- case 2: -%>
<%= symbol.name %>.contents = image.cgImage
<%= symbol.name %>.fillColor = <%= prefix %>Color.clear.cgColor
<%= symbol.name %>.masksToBounds = true
<%- case 3: -%>
<%= symbol.name %>.contents = image.cgImage
<%= symbol.name %>.fillColor = <%= prefix %>Color.clear.cgColor
<%= symbol.name %>.contentsGravity = CALayerContentsGravity.resizeAspect
<%= symbol.name %>.masksToBounds = true
<%- end -%>
<%- else if snapshot.fillColor != Color.clear -%>
<%= symbol.name %>.fillColor = <%= SwiftMacOS.code(snapshot.fillColor, layer: snapshot) %>.cgColor
<%- else -%>
<%= symbol.name %>.fillColor = nil
<%- end -%>
<%- if snapshot.lineCap.name != "butt" -%>
<%= symbol.name %>.lineCap = CAShapeLayerLineCap(rawValue: <%= SwiftMacOS.code(snapshot.lineCap, layer: snapshot) %>)
<%- end -%>
<%- if snapshot.lineJoin.name != "miter" -%>
<%= symbol.name %>.lineJoin = CAShapeLayerLineJoin(rawValue: <%= SwiftMacOS.code(snapshot.lineJoin, layer: snapshot) %>)
<%- end -%>
<%- if snapshot.strokeStart != 0 -%>
<%= symbol.name %>.strokeStart = <%= snapshot.strokeStart %>
<%- end -%>
<%- if snapshot.strokeEnd != 1 -%>
<%= symbol.name %>.strokeEnd = <%= snapshot.strokeEnd %>
<%- end -%>
<%- if snapshot.miterLimit != 10 -%>
<%= symbol.name %>.miterLimit = <%= snapshot.miterLimit %>
<%- end -%>
<%= symbol.name %>.lineDashPattern = <%= snapshot.dashPattern %>
<%= symbol.name %>.lineDashPhase = <%= snapshot.dashPatternOffset %>
<%= symbol.name %>.lineWidth = <%= snapshot.strokeWidth %>
<%= symbol.name %>.path = <%= SwiftMacOS.code(snapshot.path, layer: snapshot) %>

<%- if snapshot.currentFillType == "Gradient" -%>
let startPoint = <%= SwiftMacOS.code(snapshot.fillGradient.from, layer: snapshot) %>
let endPoint = <%= SwiftMacOS.code(snapshot.fillGradient.caGradientLayerEndPoint, layer: snapshot) %>
let colors = <%= snapshot.fillGradient.stops.map(SwiftMacOS.gradientStopColor) %>
let locations = <%= snapshot.fillGradient.stops.map(SwiftMacOS.gradientStopPosition) %>
let stops = zip(colors, locations).map { $0 }
let type: CAGradientLayerType = <%= SwiftMacOS.gradientTypeCode(snapshot.fillGradient.type) %>
<%= symbol.name %>.addGradient(type: type, startPoint: startPoint, endPoint: endPoint, stops: stops)
<%- end -%>
