<%- import SwiftMacOS -%>
// Made With Flow.
//
// DO NOT MODIFY, your changes will be lost when this file is regenerated.
//

import AppKit

@IBDesignable
public class <%= viewClassName %>: <%= prefix -%>View {
    public struct Defaults {
        public static let size = <%= code(initialRootSnapshot.bounds.size, layer: initialRootSnapshot) %>
        public static let backgroundColor = <%= code(initialRootSnapshot.backgroundColor, layer: initialRootSnapshot) %>.cgColor
    }

<%- for snapshot in initialRootSnapshot.descendants
        if snapshot.type.name == "path"
            continue
        end
        var suggestedName = snapshot.name.lowerCamelCased()
        var className = viewClassName(of: snapshot.type)
        var symbol = symbolTable.addSymbolWithSuggestedName(suggestedName, type: className, context: "", id: snapshot.id)
-%>
    public var <%= symbol.name %>: <%= className %>!
<%- end -%>

    public override var intrinsicContentSize: CGSize {
        return Defaults.size
    }

    public override init(frame: CGRect) {
        super.init(frame: frame)
        setup()
    }

    public required init?(coder: NSCoder) {
        super.init(coder: coder)
        setup()
    }

    private func setup() {
        wantsLayer = true
        guard let layer = layer else {
            return
        }
        layer.backgroundColor = Defaults.backgroundColor
        layer.masksToBounds = <%= initialRootSnapshot.masksToBounds %>
        createLayers()
        addSublayers()
        layer.name = "sceneLayer"
        //scale(to: frame.size)
    }

    /// Scales `self` and its subviews to `size`.
    ///
    /// - Parameter size: The size `self` is scaled to.
    ///
    /// If there are any constraints in IB affecting the frame of `self`, this method will have consequences on
    /// layout / rendering. To properly scale an animation, you will have to position the view manually.
    public func scale(to size: CGSize) {
        guard let layer = layer else {
            return
        }
        let x = size.width / Defaults.size.width
        let y = size.height / Defaults.size.height
        layer.transform = CATransform3DMakeScale(x, y, 1)
    }

    private func createLayers() {
        CATransaction.suppressAnimations {
        <%- for snapshot in initialRootSnapshot.descendants -%>
            <%- if snapshot.type.name == "path" continue end -%>
            <%- var symbol = symbolTable.symbolForID(snapshot.id, "") -%>
            create<%= symbol.name.upperCamelCased() %>()
        <%- end -%>
        }
    }

    <%- for snapshot in initialRootSnapshot.descendants -%>
        <%- if snapshot.type.name == "path" continue end -%>
        <%- var symbol = symbolTable.symbolForID(snapshot.id, "") -%>
    private func create<%= symbol.name.upperCamelCased() %>() {
        <%- insert("Layer/BaseLayer.swift.flt", from: SwiftMacOS, indentation: 2) -%>
    }

    <%- end -%>
    private func addSublayers() {
        guard let layer = layer else {
            return
        }
        <%-
        // Add descendant views of sceneView
        for snapshot in initialRootSnapshot.sublayers
            SwiftMacOS.addDescendantViews(of: snapshot, symbolTable: symbolTable)
        end
        // Add direct SubViews to sceneView
        for snapshot in initialRootSnapshot.sublayers
            if snapshot.type.name == "path" continue end
            var symbol = symbolTable.symbolForID(snapshot.id, "") -%>
        layer.addSublayer(<%= symbol.name %>)
        <%- end -%>
    }

    public override var isFlipped: Bool {
        return true
    }
}
