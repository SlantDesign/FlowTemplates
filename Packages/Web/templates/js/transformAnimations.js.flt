<% // Transform animations

// Returns the css transform value at the given time.
func transform(at time)
    var scaleX = timeline.value(property: "transform.scale.x", layer: layer.layer, time: 0)
    var scaleY = timeline.value(property: "transform.scale.y", layer: layer.layer, time: 0)
    var rotation = timeline.value(property: "transform.rotation.z", layer: layer.layer, time: time)
    var anchorX = timeline.value(property: "anchorPoint.x", layer: layer.layer, time: 0)
    var anchorY = timeline.value(property: "anchorPoint.y", layer: layer.layer, time: 0)
    return "'\(Web.cssTransformFormValues(anchorX: anchorX, anchorY: anchorY, scaleX: scaleX, scaleY: scaleY, rotation: rotation))'"
end

// All transform properties need to change at the same times, otherwise animation blocks will interfere with each
// other. We gather all relevant keyvalues and use their times to generate animation keyframes.
var keyvalues = []
var properties = ["transform.scale.x", "transform.scale.y", "transform.rotation.z", "anchorPoint.x", "anchorPoint.y"]
for property in properties
  var track = timeline.trackFor(layer: layer, property: property)
  if track != nil
    keyvalues = track.keyvaluesWithSimulatedSteps
  end
end

// Sort by time
func timeLess(lhs, rhs) return lhs.time < rhs.time end
keyvalues = keyvalues.sorted(by: timeLess)

if !keyvalues.isEmpty
  var transforms = [transform(at: 0)]
  var easings = []
  var previous = keyvalues[0]
  var time = 0
  for keyvalue in keyvalues
    if keyvalue.time == time continue end // Skip repeated times
    time = keyvalue.time

    transforms = transforms.appending(transform(at: time))
    if previous != nil
      easings = easings.appending(Web.timing(keyvalue: previous))
    end
    previous = keyvalue
  end

    var trackName = "\(id)TransformAnimation"
    var querrySelector = "`${this.elementID} .\(id)`"
    var propertyName = "transform"
    var values = transforms
    var timingFunctions = easings
    var times = Web.animationTimes(of: keyvalues)
    var duration = timeline.duration * 1000
    insert("js/trackConstructor.js.flt", from: Web, indentation: indentation)
end
-%>
