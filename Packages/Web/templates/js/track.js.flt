<%-
var imageFolderPath = Web.pathPrefix(relativePath: "./img", absolutePath: imageFolderAbsPath, relative: relative)
var keyvalues = track.keyvaluesWithSimulatedSteps
var duration = timeline.duration * 1000

// Get all the keyvalue times
var times = Web.animationTimes(of: keyvalues)

// Get all the keyvalue values

var values = Web.trackValues(property: property, keyvalues, layer: layer, imageFolderPath: imageFolderPath, importImage: importImage, duration)

// Get all the keyvalue timing functions
var timingFunctions = Web.timingFunctions(keyvalues: keyvalues.dropLast(), duration)

var querrySelector = Web.querrySelectorFor(property: property, timelineName: timelineName, id: id)
var propertyName = Web.jsPropertyName(property: property)
var trackName = Web.trackName(propertyName: propertyName, id: id)
var transformOrigins = nil

switch property.id
  case "contentsGravity":
    insert("js/contentsGravityAnimations.js.flt", from: Web, indentation: 0)
  case "fillGradient":
    insert("js/gradientAnimations.js.flt", from: Web, indentation: 0)
    break
  default:
    insert("js/trackConstructor.js.flt", from: Web, indentation: indentation)
end -%>