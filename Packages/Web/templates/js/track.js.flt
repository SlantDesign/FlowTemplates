<%-
var imageFolderPath = Web.pathPrefix(relativePath: "./img", absolutePath: imageFolderAbsPath, relative: relative)
var keyvalues = track.keyvalues
// Get all the keyvalue times
var times = []
for keyvalue in keyvalues
  times = times.appending(keyvalue.time * 1000)
end

// Get all the keyvalue values
var values = []
for keyvalue in keyvalues
  var value = Web.cssValue(property: property, value: keyvalue.value, layer: layer, imageFolderPath: imageFolderPath, importImage: importImage)
  values = values.appending(value)
end

// Get all the keyvalue timing functions
var timingFunctions = []
for keyvalue in keyvalues.dropLast()
  var timingFunction = Web.cssTimingFunction(of: keyvalue.trailingTimingFunction).inQuotes()
  timingFunctions = timingFunctions.appending(timingFunction)
end


var querrySelector = Web.querrySelectorFor(property: property, timelineName: timelineName, id: id).inQuotes()
var propertyName = Web.jsPropertyName(property: property)
var animationName = "\(id)_\(propertyName.snakeCased())"

switch property.id
  case 
  case "contentsGravity":
    insert("js/contentsGravityAnimations.js.flt", from: Web, indentation: 0)
  case "fillGradient":
    insert("js/gradientAnimations.js.flt", from: Web, indentation: 0)
  default:
    insert("js/trackConstructor.js.flt", from: Web, indentation: indentation)
end -%>