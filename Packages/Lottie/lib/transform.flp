func transform(layer, timeline, type)
    return [
        "o": opacityComponent(layer: layer, timeline: timeline, type: type),
        "r": rotationComponent(layer: layer, timeline: timeline, type: type),
        "p": positionComponent(layer: layer, timeline: timeline, type: type),
        "a": anchorPointComponent(layer: layer, timeline: timeline, type: type),
        "s": scaleComponent(layer: layer, timeline: timeline, type: type)
    ]
end

func opacityComponent(layer, timeline, type)
    if type == "composition"
        return opacityAnimation(layer: layer, timeline: timeline)
    else if type == "content" && layer.type.name == "text"
        return animation(layer: layer, propertyID: foregroundColorOpacityProperty, timeline: timeline)
    else
        return ["a": 0,"k": 100]
    end
end

func rotationComponent(layer, timeline, type)
    switch type
    case "null":
        return  rotationAnimation(layer: layer, timeline: timeline)
    default:
        return  ["a": 0,"k": 0]
    end
end

func scaleComponent(layer, timeline, type)
    if type == "content" && layer.type.name == "image"
        return imageScaleAnimation(layer: layer, timeline: timeline)
    end

    if type == "null"
        var scaleX = layer.flippedHorizontal * 100
        var scaleY = layer.flippedVertical * 100
        return ["a": 0,"k": [scaleX,scaleY]]
    end

    return ["a": 0,"k": [100,100]]
end

func anchorPointComponent(layer, timeline, type)
    switch type
    case "null":
        return anchorPointAnimation(layer: layer, timeline: timeline)
    default:
        return ["a": 0,"k": [0,0]]
    end
end

func positionComponent(layer, timeline, type)
    if type == "null"
        return positionAnimation(layer: layer, timeline: timeline)
    end

    if type == "content" 
        switch layer.type.name
        case "text":
            return [
                    "a": 0,
                    "k": [
                        xTextPosition(layer: layer),
                        yTextPosition(layer: layer)
                    ]
                ]
        case "image":
            return imagePositionAnimation(layer: layer, timeline: timeline)
        end
    end

    return ["a": 0,"k": [0,0]]
end

func xTextPosition(layer)
    switch layer.alignment.name
    case "right":
        return 0
    case "left":
        return 0
    case "center":
        return 0
    case "justified":
        return 0
    default:
        return 0
    end
end

func yTextPosition(layer)
    return layer.font.ascender
end