func animateTag(hrefID, attributeName, values, dur, fill, calcMode, keytimes, keysplines, repeats, attributeType)
  var attributes = [
      "href": hrefID,
      "attributeName": attributeName,
      "values": values,
      "dur": dur,
      "fill": fill,
      "calcMode": calcMode,
      "keyTimes": keytimes,
      "keySplines": keysplines,
      "repeatCount": repeats,
      "attributeType": attributeType
      ]
      return elementTag("animate", attributes: attributes, body: nil)
end

func animateTransformTag(label, hrefID, attributeName, type, additive, values, dur, fill, calcMode, keytimes, keysplines, repeats, attributeType)
  var attributes = [
      "label":label,
      "href": hrefID,
      "attributeName": attributeName,
      "type": type,
      "additive": additive,
      "values": values,
      "dur": dur,
      "fill": fill,
      "calcMode": calcMode,
      "keyTimes": keytimes,
      "keySplines": keysplines,
      "repeatCount": repeats,
      "attributeType": attributeType
      ]
      return elementTag("animateTransform", attributes: attributes, body: nil)
end

func rectTag(id, x, y, width, height, rx, stroke, strokeWidth, fill, preserveAspectRatio, body)
    var attributes = [
       "id": id, 
       "x": x, 
       "y": y, 
       "width": width, 
       "height": height, 
       "rx": rx, 
       "stroke": stroke,
       "stroke-width": strokeWidth, 
       "fill": fill, 
       "preserveAspectRatio": preserveAspectRatio 
    ]
    return elementTag("rect", attributes: attributes, body: body)
end

func borderTag(layer, timeline)
  var body = animations(properties: borderProperties(), layer: layer, timeline: timeline, hrefID: nil, attributeType: nil)
  var x = layer.borderWidth / 2
  var y = layer.borderWidth / 2
  if layer.type.name == "image"
    x = 0
    y = 0
  end

  return rectTag(id: nil, 
          x: x, 
          y: y, 
          width: layer.bounds.size.width, 
          height: layer.bounds.size.height, 
          rx: layer.cornerRadius, 
          stroke: layer.borderColor.hex,
          strokeWidth: layer.borderWidth, 
          fill: "none", 
          preserveAspectRatio: nil, 
          body: body)
end

func backgroundTag(layer, timeline)
  var body = animations(properties: backgroundProperties(), layer: layer, timeline: timeline, hrefID: nil, attributeType: nil)
  return rectTag(id: nil, 
          x: 0, 
          y: 0, 
          width: "100%", 
          height: "100%", 
          rx: layer.cornerRadius, 
          stroke: nil,
          strokeWidth: 0,
          fill: layer.backgroundColor.hex, 
          preserveAspectRatio: nil, 
          body: body)
end

func shapeTag(timeline, layer, id)
  var body = animations(properties: shapeProperties(), layer: layer, timeline: timeline, hrefID: "#\(id)", attributeType: nil)
  return pathTag(id: id, 
          vectorEffect: nil, 
          strokeMiterlimit: layer.miterLimit,
          stroke: layer.strokeColor.hex,
          strokeLinecap: getLineCap(layer: layer),
          strokeLinejoin: getLineJoin(layer: layer),
          strokeDasharray: Web.printDashPatternArray(layer.dashPattern),
          strokeDashOffset: layer.dashPatternOffset,
          strokeWidth: layer.strokeWidth,
          d: layer.path.svgc(width: layer.bounds.size.width, height: layer.bounds.size.height),
          fill: getFillAttribute(id: id, layer: layer),
          body: body)
end

func pathTag(id,
            vectorEffect,
            strokeMiterlimit,
            stroke, 
            strokeLinecap, 
            strokeLinejoin, 
            strokeDasharray, 
            strokeDashOffset,
            strokeWidth,
            d,
            fill,
            body)
  var attributes = [
       "id": id, 
       "vector-effect": vectorEffect, 
       "stroke-miterlimit": strokeMiterlimit, 
       "stroke": stroke, 
       "stroke-linecap": strokeLinecap, 
       "stroke-linejoin": strokeLinejoin, 
       "stroke-dasharray": strokeDasharray,
       "stroke-dashoffset": strokeDashOffset, 
       "stroke-width": strokeWidth, 
       "d": d,
       "fill": fill 
    ]
    return elementTag("path", attributes: attributes, body: body)
end

func imageTag(layer, timeline)
    var href = imageHref(image: layer.image)
    var contentMode = layer.contentMode.name
    var layerSize = layer.bounds.size
    var imageSize = layer.image.size
    var x = imageX(contentMode: contentMode, layerSize: layerSize, imageSize: imageSize)
    var y = imageY(contentMode: contentMode, layerSize: layerSize, imageSize: imageSize)
    var width = imageWidth(contentMode: contentMode, layerSize: layerSize, imageSize: imageSize)
    var height = imageHeight(contentMode: contentMode, layerSize: layerSize, imageSize: imageSize)
    var preserveAspectRatio = "none"
    var body = process("imageBody.svg.flt", into: nil, indentation: 0)
    return imageElementTag(id: generateSymbolID(layer: layer),
                href: href,
                x: x, 
                y: y, 
                width: width, 
                height: height, 
                preserveAspectRatio: preserveAspectRatio,
                body: body)
end

func imageElementTag(id, href, x, y, width, height, preserveAspectRatio, body)
  var attributes = [
    "id": id, 
    "href": href, 
    "x": x, 
    "y": y, 
    "width": width, 
    "height": height, 
    "preserveAspectRatio": preserveAspectRatio
  ]

  return elementTag("image", attributes: attributes, body: body)
end

func patternTag(id, layer, timeline)
  var body = process("fillImage.svg.flt", into: nil, indentation: 0)
  return patternElementTag(
    id: "\(id)-fillImage",
    x: "0",
    y: "0",
    width: "100%",
    height: "100%",
    patternUnits: "userSpaceOnUse",
    body: body
  )
end

func patternElementTag(id, x, y, width, height, patternUnits, body)
  var attributes = [
    "id": id,
    "x": x,
    "y": y,
    "width": width, 
    "height": height, 
    "patternUnits": patternUnits
  ]

  return elementTag("pattern", attributes: attributes, body: body)
end

func textTag(id, layer, timeline)
  var body = process("textBody.svg.flt", into: nil, indentation: 0)
  return textElementTag(
    id: id,
    x: alignmentPosition(layer: layer),
    y: 0,
    width: layer.size.width,
    height: layer.size.height,
    fontFamily: layer.font.name,
    fontSize: layer.fontSize,
    textAnchor: alignment(layer: layer),
    style: "inline-size: \(layer.size.width)",
    fill: layer.foregroundColor.hex,
    visibility: "visible",
    body: body,
    layer: layer,
    alignmentBaseline: "hanging"
  )
end

func textElementTag(id, x, y, width, height, fontFamily, fontSize, textAnchor, style, fill, visibility, body, layer, alignmentBaseline)
  var attributes = [
    "id": id, 
    "x": x, 
    "y": y, 
    "width": width, 
    "height": height, 
    "font-family": fontFamily, 
    "font-size": fontSize, 
    "text-anchor": textAnchor, 
    "style": style, 
    "fill": fill,
    "alignment-baseline": alignmentBaseline,
    "visibility": visibility
  ]

  return elementTag("text", attributes: attributes, body: body)
end

func elementTag(_ elementName, attributes, body)
    return process("tags/svgElement.svg.flt", into: nil, indentation: 0)
end