func transformAnimation(property, layer, timeline, indentation)
    if isAnimated(layer, property: property, timeline: timeline)
        var track = trackFor(layer, property: property, timeline: timeline)
        var values = valuesFrom(track: track, layer: layer, property: property)
        var keytimes = keyTimesFrom(track: track)
        var keysplines = keysplinesFrom(track: track)
        return animateTransformTag(label: layer.name,
                            hrefID: nil,
                            attributeName: "transform",
                            type: transformType(property: property),
                            additive: nil,
                            values: values.joined(separator: ";"),
                            dur: timeline.duration,
                            fill: "freeze",
                            calcMode: "spline",
                            keytimes: keytimes.joined(separator: ";"),
                            keysplines: keysplines.joined(separator: ";"),
                            repeats: "indefinite",
                            attributeType: nil,
                            indentation: indentation)
    end
    return ""
end

func transformType(property)
    switch property
    case "bounds.size.height":
        return "scale"
    case "bounds.size.width":
        return "scale"
    case "transform.rotation.z":
        return "rotate"
    default:
        return nil
    end
end

func shadowAnimations(timeline, layer, id, indentation)
    return animations(properties: shadowProperties(), layer: layer, timeline: timeline, hrefID: "#\(id)-shadow-filter", attributeType: "XML", indentation: indentation)
end

func animations(properties, layer, timeline, hrefID, attributeType, indentation)
    var animations = []
    for property in properties
        var animation = animation(property: property,
                        layer: layer,
                        timeline: timeline,
                        hrefID: hrefID, attributeType:
                        attributeType,
                        indentation: indentation)
        if animation != nil
            animations = animations.appending(animation)
        end
    end
    return animations.joined(separator: "")
end

func animation(property, layer, timeline, hrefID, attributeType, indentation)
    if isAnimated(layer, property: property, timeline: timeline)
        var track = trackFor(layer, property: property, timeline: timeline)
        var values = valuesFrom(track: track, layer: layer, property: property)
        var keytimes = keyTimesFrom(track: track)
        var keysplines = keysplinesFrom(track: track)

        return animateTag(
                hrefID: hrefID,
                attributeName: svgAttributeName(of: property),
                values: values.joined(separator: ";"),
                dur: "\(track.timeline.duration)s",
                fill: "freeze",
                calcMode: "spline",
                keytimes: keytimes.joined(separator: ";"),
                keysplines: keysplines.joined(separator: ";"),
                repeats: "indefinite",
                attributeType: attributeType,
                indentation: indentation)
    end
    return ""
end

func isAnimated(_ layer, property, timeline)
    return trackFor(layer, property: property, timeline: timeline) != nil
end

func trackFor(_ layer, property, timeline)
    switch property
    case "image.width":
        return timeline.sizeTrack(layer: layer)
    case "image.height":
        return timeline.sizeTrack(layer: layer)
    case "image.position.x":
        return timeline.sizeTrack(layer: layer)
    case "image.position.y":
        return timeline.sizeTrack(layer: layer)
    case "position.offset.x":
        return timeline.trackFor(layer: layer, property: "bounds.size.width")
    case "position.offset.y":
        return timeline.trackFor(layer: layer, property: "bounds.size.height")
    default:
        return timeline.trackFor(layer: layer, property: property)
    end
end

func valuesFrom(track, layer, property)
    var values = []
    for keyvalue in track.keyvaluesWithSimulatedSteps
        var value = valueFrom(keyvalue: keyvalue, layer: layer, property: property)
        values = values.appending(value)
    end
    return values
end

func valueFrom(keyvalue, layer, property)
    if ["combinedPath", "maskPath"].contains(property)
        var size = keyvalue.timeline.value(property: "size", layer: keyvalue.track.layer, time: keyvalue.time)
        return keyvalue.value.svgc(width: size.width, height: size.height)
    end
    if ["image.width", "image.height", "image.position.x", "image.position.y"].contains(property)
        var contentMode = layer.contentMode.name
        var layerSize = keyvalue.timeline.value(property: "size", layer: keyvalue.track.layer, time: keyvalue.time)
        var imageSize = keyvalue.timeline.value(property: "image", layer: keyvalue.track.layer, time: keyvalue.time).size
        switch property
        case "image.width":
            return imageWidth(contentMode: contentMode, layerSize: layerSize, imageSize: imageSize)
        case "image.height":
            return imageHeight(contentMode: contentMode, layerSize: layerSize, imageSize: imageSize)
        case "image.position.x":
            return imageX(contentMode: contentMode, layerSize: layerSize, imageSize: imageSize)
        case "image.position.y":
            return imageY(contentMode: contentMode, layerSize: layerSize, imageSize: imageSize)
        end
    end
    if ["position.offset.x", "position.offset.y"].contains(property)
        switch property
        case "position.offset.x":
            return "\(-layer.anchorPoint.x * keyvalue.value)"
        case "position.offset.y":
            return "\(-layer.anchorPoint.y * keyvalue.value)"
        end
    end
    return svgValue(keyvalue.value, propertyID: property, layer: layer)
end

func keyTimesFrom(track)
    var keytimes = []
    for keyvalue in track.keyvaluesWithSimulatedSteps
        keytimes = keytimes.appending(keyvalue.time / track.timeline.duration)
    end
    return keytimes
end

func keysplinesFrom(track)
    var keysplines = []
    for animation in track.animationsFromKeyvaluesWithSimulatedSteps
      var keyspline = keysplinesFromAnimation(animation)
      keysplines = keysplines.appending(keyspline)
    end
    return keysplines
end

func keysplinesFromAnimation(_ animation)
    var c1 = animation.timingFunction.controlPoints[0]
    var c2 = animation.timingFunction.controlPoints[1]
    return "\(c1.x) \(c1.y) \(c2.x) \(c2.y)"
end

func gradientStopAnimation(timeline, layer, stopIndex, property, indentation)
    var track = timeline.trackFor(layer: layer, property: "fillGradient")

    if track == nil
        return ""
    end

    var keytimes = keyTimesFrom(track: track)
    var keysplines = keysplinesFrom(track: track)
    var gradients = valuesFrom(track: track, layer: layer, property: "fillGradient")

    var values = []
    for gradient in gradients
        var stop = gradient.stops[stopIndex]
        values = values.appending(svgValue(stop, propertyID: property, layer: layer))
    end

    if values.areIdentical()
        return ""
    end

    return animateTag(
                hrefID: nil,
                attributeName: svgAttributeName(of: property),
                values: values.joined(separator: ";"),
                dur: "\(track.timeline.duration)s",
                fill: "freeze",
                calcMode: "spline",
                keytimes: keytimes.joined(separator: ";"),
                keysplines: keysplines.joined(separator: ";"),
                repeats: "indefinite",
                attributeType: nil,
                indentation: indentation)
end
