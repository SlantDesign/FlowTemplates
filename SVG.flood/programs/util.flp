/// Returns the SVG attribute name of a property.
func svgAttributeName(of property)
    switch property
    case "position.x": return "x"
    case "position.y": return "y"
    case "position.offset.x": return "x"
    case "position.offset.y": return "y"
    case "bounds.size.width": return "width"
    case "bounds.size.height": return "height"
    case "anchorPoint.x": return "transform"
    case "anchorPoint.y": return "transform"
    case "transform.rotation.z": return "rotation"
    case "opacity": return "opacity"
    case "backgroundColor": return "fill"
    case "borderWidth": return "stroke-width"
    case "borderColor": return "stroke"
    case "cornerRadius": return "rx"
    case "shadowColor": return "flood-color"
    case "shadowRadius": return "stdDeviation"
    case "shadowOffset.width": return "dx"
    case "shadowOffset.height": return "dy"
    case "resizing.margin.top": return "top"
    case "resizing.margin.left": return "left"
    case "resizing.margin.bottom": return "bottom"
    case "resizing.margin.right": return "right"
    case "transform.scale.x": return "transform"
    case "transform.scale.y": return "transform"

    // Image
    case "image": return "href"
    case "image.width": return "width"
    case "image.height": return "height"
    case "image.position.x": return "x"
    case "image.position.y": return "y"
    // Content Mode is not animated
    //case "contentsGravity": return "viewBox"

    // Path

    // Shape
    case "combinedPath": return "d"
    case "fillColor": return "fill"
    case "strokeColor": return "stroke"
    case "lineWidth": return "stroke-width"
    case "strokeStart": return "stroke-dashoffset"
    case "strokeEnd": return ""
    case "miterLimit": return "stroke-miterlimit"
    case "lineCap": return "stroke-linecap"
    case "lineJoin": return "stroke-linejoin"
    case "lineDashPattern": return "stroke-dasharray"
    case "lineDashPhase": return "stroke-dashoffset"
    case "fillGradient": return "fillGradient"
    case "fillImage": return "href"

    // Shape Mask
    case "maskPath": return "d"

    // Text
    case "font": return "font-family"
    case "fontSize": return "font-size"
    case "foregroundColor": return "fill"
    case "truncationMode": return "text-overflow"
    end
end

/// Returns the SVG value for a property
func svgValue(_ value, propertyID, layer)
    switch propertyID
    case "position.x": return "\(value)"
    case "position.y": return "\(value)"
    case "bounds.size.width": return "\(value)"
    case "bounds.size.height": return "\(value)"
    // Anchor points not supported in svg export.
    //case "anchorPoint.x": return "\(value * 100)%, 0"
    //case "anchorPoint.y": return "0 \(value * 100)%"
    /// Rotation: (Angle, anchorPointX, anchorPointY)
    case "transform.rotation.z": return "\(value.degrees)"
    case "opacity": return "\(value)"
    case "backgroundColor": return value.hex
    case "borderWidth": return "\(value)"
    case "borderColor": return value.hex
    case "cornerRadius": return "\(value)"
    case "resizing.margin.top": return "\(value)"
    case "resizing.margin.left": return "\(value)"
    case "resizing.margin.bottom": return "\(value)"
    case "resizing.margin.right": return "\(value)"
    case "transform.scale.x": return "\(value), 1"
    case "transform.scale.y": return "1, \(value)"
    case "shadowColor": return value.hex
    case "shadowRadius": return value
    case "shadowOffset.width": return "\(value)"
    case "shadowOffset.height": return "\(value)"

    // Image
    case "image": return imageHref(image: value)

    // Shape
    case "fillColor": return value.hex
    case "strokeColor": return value.hex
    case "lineWidth": return "\(value)"
    case "strokeStart": return "\(value)"
    case "strokeEnd": return ""
    case "miterLimit": return "\(value)"
    case "lineCap": return "\(value)"
    case "lineJoin": return "\(value)"
    case "fillImage": return imageHref(image: value.image)
    case "lineDashPattern": return Web.printDashPatternArray(value)
    case "lineDashPhase": return "\(value)"
    // Not handled by this function
    // case "combinedPath": return value.svg

    // Shape Mask
    // Not handled by this function
    //case "maskPath": return value.svg

    // Text
    case "string": return ""
    case "font": return "\(value.name)"
    case "fontSize": return "\(value)"
    case "foregroundColor": return value.hex
    case "truncationMode": return "\(value)"
    end
end

func transform(of layer)
  var dx = layer.anchorPoint.x * layer.size.width
  var dy = layer.anchorPoint.y * layer.size.height
  var transform = "translate(\(-dx) \(-dy))"
  if layer.rotation.degrees != 0
    transform = "\(transform) rotate(\(layer.rotation.degrees))"
  end
  if layer.flippedHorizontal != 1 || layer.flippedVertical != 1
    transform = "\(transform) scale(\(layer.flippedHorizontal) \(layer.flippedVertical)"
  end
  return transform
end

func getFillAttribute(id, layer)
    if layer.fillGradient != nil
        return "url(#\(id)-fill)"
    end
    if layer.fillImage != nil
        return "url(#\(id)-fillImage)"
    end
    return "\(layer.fillColor.hex)"
end

func getLineCap(layer)
  if layer.lineCap.name != "butt"
    return layer.lineCap
  else
    return nil
  end
end

func getLineJoin(layer)
  if layer.lineJoin.name != "miter"
    return layer.lineJoin
  else
    return nil
  end
end

func layerMasksToBounds(layer)
  if (layer.type.name == "group" && layer.masksToBounds) || 
        layer.type.name == "image" || 
        layer.type.name == "text"
    return "hidden"
  else
    return "visible"
  end
end

func clipPathURL(layer)
	if layer.type.name == "shapeMask"
		var id = generateSymbolID(layer: layer)
		return "url(#\(id)-clipPath)"
	else
		return "" 
	end
end

func shapeProperties()
    return [
        "combinedPath",
        "fillColor",
        "lineCap",
        "lineDashPhase",
        "lineDashPattern",
        "lineJoin",
        "lineWidth",
        "miterLimit",
        "strokeColor"
        // Not supported by SVG spec
        //"strokeEnd",
        //"strokeStart"    
    ]
end

func textProperties()
  return [
    "font",
    "fontSize",
    "foregroundColor",
    "truncationMode"
  ]
end

func backgroundProperties()
  return [
    "backgroundColor",
    "cornerRadius"
  ]
end

func borderProperties()
  return [
    "borderWidth",
    "borderColor",
    "cornerRadius",
    "bounds.size.height",
    "bounds.size.width"
  ]
end

func shadowProperties()
  return [
    "shadowColor",
    "shadowRadius",
    "shadowOffset.width",
    "shadowOffset.height"
  ]
end

func alphabetically(lhs, rhs)
  return lhs < rhs
end

func generateSymbolID(layer)
  var symbol = symbolTable.symbolForID(layer.id, "")
  if symbol == nil
      symbol = symbolTable.addSymbolWithSuggestedName(layer.name.snakeCased(), type: "id", context: "", id: layer.id)
  end
  return symbol.name
end

func imageHref(image)
    return "./img/\(image.name).png"
end


func scale(from layer)
  return "scale(\(layer.flippedHorizontal) \(layer.flippedVertical))"
end

func alignmentPosition(layer)
    switch layer.alignment.name
    case "left":
        return 0
    case "right":
        return layer.bounds.size.width
    case "center":
        return layer.bounds.size.width / 2
    end
end

func alignment(layer)
    switch layer.alignment.name
    case "left":
        return "start"
    case "right":
        return "end"
    case "center":
        return "middle"
    end
end

func shadowFilter(layer, timeline)
    if isShadowVisible(layer: layer, timeline: timeline)
        return "url(#\(generateSymbolID(layer: layer))-shadow)"
    else
        return ""
    end
end

func isShadowVisible(layer, timeline)
    if timeline.trackFor(layer: layer, property: "shadowColor") == nil && 
        layer.shadowColor.alpha == 0
        return false
    else
        return true
    end
end

func isFontVisible(layer, timeline)
    if layer.type.name != "text"
        return false
    end

    if timeline.trackFor(layer: layer, property: "foregroundColor") == nil && 
    layer.foregroundColor.hex == 0
        return false
    else
        return true
    end
end

func isBackgroundVisible(layer, timeline)
    if timeline.trackFor(layer: layer, property: "backgroundColor") == nil && 
        layer.backgroundColor.alpha == 0
        return false
    else
        return true
    end
end

func isBorderVisible(layer, timeline)
    if timeline.trackFor(layer: layer, property: "borderWidth") == nil && 
        layer.borderWidth == 0
        return false
    else
        return true
    end
end

func shouldExport(layer)
    return layer.visible
end