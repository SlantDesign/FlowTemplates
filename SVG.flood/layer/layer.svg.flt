
<% var symbol = symbolTable.symbolForID(layer.id, "")
if symbol == nil
    symbol = symbolTable.addSymbolWithSuggestedName(layer.name.snakeCased(), type: "id", context: "", id: layer.id)
end
var id = symbol.name
var width = layer.bounds.size.width
var height = layer.bounds.size.height
var x = layer.position.x
var y = layer.position.y
%>
<svg x="<%= x %>" y="<%= y %>" width="<%= width %>" height="<%= height %>" style ="overflow:<%= layerMasksToBounds(layer: layer) %>" label="<%= layer.name %>Container" display="<%= layerDisplay(layer: layer) %>">
    <%= animations(properties: baseProperties(), layer: layer, timeline: timeline, hrefID: nil, attributeType: nil) -%>
    <g label="flipped" transform="<%= scale(from: layer) %>">
        <g label="layerRotation">
            <%= transformAnimation(property: "transform.rotation.z", layer: layer, timeline: timeline) -%>
<<<<<<< HEAD
            <g label="layerShadow" filter="<%= shadowFilter(layer: layer, timeline: timeline) %>">
=======
            <g label="layerShadow" filter="url(#<%= id %>-shadow)">
                <% if isBackgroundVisible(layer: layer, timeline: timeline) %>
>>>>>>> added conditionally rendering of border and background tags based on their visibilty
                <%= backgroundTag(layer: layer, timeline: timeline) %>
                <% end %>
                <% insert("layer/\(layer.type.name).svg.flt", indentation: indentation) -%>
                <% if isBorderVisible(layer: layer, timeline: timeline) %>
                <%= borderTag(layer: layer, timeline: timeline) %>
                <% end %>         
            </g>
        </g>
    </g>
</svg>