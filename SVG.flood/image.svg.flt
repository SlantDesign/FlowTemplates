<%-
var width = layer.image.size.width
var height = layer.image.size.height
var viewWidth = layer.size.width
var viewHeight = layer.size.height
var x = 0
var y = 0
var aspectRatio = "none"
switch layer.contentMode.name
  case "topLeft":
    x = 0
    y = 0
    aspectRatio = "none"
  case "top":
    x = width/2 - viewWidth/2
  case "topRight":
    x = width - viewWidth
  case "left":
    y = height/2 - viewHeight/2
  case "center":
    x = width/2 - viewWidth/2
    y = height/2 - viewHeight/2
  case "right":
    x = width - viewWidth
    y = height/2 - viewHeight/2
  case "bottomLeft":
    y = height - viewHeight
  case "bottom":
    x = width/2 - viewWidth/2
    y = height - viewHeight
  case "bottomRight":
    x = width - viewWidth
    y = height - viewHeight
  default:
    aspectRatio = svgPreserveAspectRatio(layer.contentMode)
    width = viewWidth
    height = viewHeight
end
-%>
<defs>
  <image
    preserveAspectRatio="<%= aspectRatio %>"
    id="<%= id %>"
  <%- if !layer.visible -%>
    opacity="0"
  <%- else if layer.opacity != 1 -%>
    opacity="<%= layer.opacity %>"
  <%- end -%>
    width="<%= width %>"
    height="<%= height %>"
    href="data:image/png;base64,<%= layer.image.base64Encoded() %>"
    >
  </image>
</defs>
<g id="<%= id %>-layer-translate" transform="<%= transform(of: layer) %>">
  <svg x="0" y="0" preserveAspectRatio="<%= aspectRatio %>" viewBox="<%= x %> <%= y %> <%= viewWidth %> <%= viewHeight %>" width="<%= viewWidth %>" height="<%= viewHeight %>">
    <use href="#<%= id %>" />
    <%
var tracks = timeline.tracksForLayer(layer.layer).filter(trackIsForElement)
insert("animations.svg.flt", indentation: indentation + 1) -%>
    </svg>
</g>