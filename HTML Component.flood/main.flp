import Web

// Indicates whether or not special characters should be escaped when printing out template. 
// Used to print out HTML code in HTML files in the generated REAMDE.
var escape = false

for timeline in timelines
    // Get a snapshot of the rootLayer at time 0
    var layer = timeline.rootLayer(at: 0)
    
    // Get the name of the timeline folder
    var timelineFolder = folderTable.symbolForID(timeline.id, "\(outputFolderPath)/\(documentFolderName)/\(templateFolderName)").name

    // Get the timeline output path
    var timelineOutputPath = "\(documentFolderName)/\(templateFolderName)/\(timelineFolder)"

    // Set the name for the html & css files to the name of the timeline
    var timelineName = timelineFolder
    var timelineNameLowerCamelCased = timelineName.lowerCamelCased()
    var forwardTimelineName = "\(timelineName)Timeline"
    var timelineNameLowercased = timelineName.lowercased()
    var resourcesPath = "\(timelineNameLowercased)ResourcesPath"

    //Import image file or generate path to image file
    var importImage = false

    // Get all assets for this timeline
    var fontsInTimeline = document.fonts(forTimeline: timeline)
    var imagesInTimeline = document.images(forTimeline: timeline)

    // Folder names
    var imageFolderName = "img"
    var fontFolderName = "fonts"
    var jsFolderName = "js"
    var cssFolderName = "css"
    var commonFolderName = "FlowCommon"

    // The absolute paths to use when reference assets in the image, font, js or css folders
    var imageFolderAbsPath = "\(baseUrl)/\(imageFolderName)"
    var fontFolderAbsPath = "\(baseUrl)/\(fontFolderName)"
    var jsFolderAbsPath = "\(baseUrl)/\(jsFolderName)"
    var cssFolderAbsPath = "\(baseUrl)/\(cssFolderName)"
    var commonFolderAbsPath = "\(baseUrl)/\(commonFolderName)"

    // Delete previously exported project
    rm(timelineOutputPath)

    // Create output directories
    mkdir("\(timelineOutputPath)/\(imageFolderName)")
    mkdir("\(timelineOutputPath)/\(cssFolderName)")
    mkdir("\(timelineOutputPath)/\(jsFolderName)")
    mkdir("\(timelineOutputPath)/\(fontFolderName)")
    mkdir("\(timelineOutputPath)/\(commonFolderName)")

    var shapeIDs = []
    var loopButtonID = "loopButton-\(timelineNameLowerCamelCased)"
    var playPauseButtonID = "playPauseButton-\(timelineNameLowerCamelCased)"
    var sliderID = "slider-\(timelineNameLowerCamelCased)"
    var timeLabelID = "timeLabel-\(timelineNameLowerCamelCased)"
    var timerID = "timer-\(timelineNameLowerCamelCased)"

    process("index.js.flt", into: "\(timelineOutputPath)/js/\(timelineName)Component.js", indentation: 0)
    process("index.html.flt", into: "\(timelineOutputPath)/\(timelineName).html", indentation: 0)
    process("css/style.css.flt", from: Web, into: "\(timelineOutputPath)/\(cssFolderName)/\(timelineName).css", indentation: 0)

    var timelineClassName = forwardTimelineName
    process("js/timeline.js.flt", from: Web, into: "\(timelineOutputPath)/\(jsFolderName)/\(forwardTimelineName).js", indentation: 0)
    
    process("js/player.js.flt", from: Web, into: "\(timelineOutputPath)/\(commonFolderName)/player.js", indentation: 0)
    process("instances.js.flt", into: "\(timelineOutputPath)/\(jsFolderName)/instances.js", indentation: 0)
    process("timelineScripts.js.flt", into: "\(timelineOutputPath)/\(jsFolderName)/\(timelineNameLowerCamelCased).js", indentation: 0)

    Web.copyOverCommonFile(to: "\(timelineOutputPath)/\(commonFolderName)")
    process("js/components/ToggleButton.js.flt", from: Web, into: "\(timelineOutputPath)/\(commonFolderName)/ToggleButton.js", indentation: 0)
    copy(from: "../Packages/web/templates/js/components/flowCommon.js", to: "\(timelineOutputPath)/\(commonFolderName)/flowCommon.js")

    // Driver Code
    var driverFolderName = "driver"
    var driverOutputPath = "\(timelineOutputPath)/\(driverFolderName)"
    mkdir("\(driverOutputPath)/\(jsFolderName)")
    mkdir("\(driverOutputPath)/\(cssFolderName)")
    mkdir("\(driverOutputPath)/\(imageFolderName)")
    mkdir("\(driverOutputPath)/\(fontFolderName)")

    process("driver/driver.js.flt", into: "\(driverOutputPath)/\(jsFolderName)/driver.js", indentation: 0)
    process("driver/DriverComponent.js.flt", into: "\(driverOutputPath)/\(jsFolderName)/DriverComponent.js", indentation: 0)
    
    process("driver/driver.css.flt", into: "\(driverOutputPath)/\(cssFolderName)/driver.css", indentation: 0)
    copy(from: "driver/loop.svg", to: "\(driverOutputPath)/\(imageFolderName)/loop.svg")
    copy(from: "driver/pause.svg", to: "\(driverOutputPath)/\(imageFolderName)/pause.svg")
    copy(from: "driver/play.svg", to: "\(driverOutputPath)/\(imageFolderName)/play.svg")
    copy(from: "driver/sliderThumb.svg", to: "\(driverOutputPath)/\(imageFolderName)/sliderThumb.svg")
    
    copy(from: "driver/Roboto-Regular.ttf", to: "\(driverOutputPath)/\(fontFolderName)/Roboto-Regular.ttf")

    // Copy Images
    for image in imagesInTimeline
        var imageData = image.serializeAsPNGData()
        if imageData != nil 
            write(data: imageData, to: "\(timelineOutputPath)/\(imageFolderName)/\(image.name).png")
        end
    end

    // Copy Fonts
    for font in fontsInTimeline
        if !Web.webFonts.contains(font.name) && font.path != nil
            copy(from: font.path, to: "\(timelineOutputPath)/\(fontFolderName)/\(font.name).\(font.extension)")
        end
    end

    // Clear the symbol table
    symbolTable.removeAllSymbols()
end
